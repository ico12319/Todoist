// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	filters "Todo-List/internProject/todo_app_service/internal/sql_query_decorators/filters"
	mock "github.com/stretchr/testify/mock"

	sql_query_decorators "Todo-List/internProject/todo_app_service/internal/sql_query_decorators"
)

// CommonFactory is an autogenerated mock type for the CommonFactory type
type CommonFactory struct {
	mock.Mock
}

type commonFactory_Expecter struct {
	mock *mock.Mock
}

func (_m *CommonFactory) EXPECT() *commonFactory_Expecter {
	return &commonFactory_Expecter{mock: &_m.Mock}
}

// CreateCommonDecorator provides a mock function with given fields: ctx, inner, baseFilters
func (_m *CommonFactory) CreateCommonDecorator(ctx context.Context, inner sql_query_decorators.SqlQueryRetriever, baseFilters *filters.BaseFilters) (sql_query_decorators.SqlQueryRetriever, error) {
	ret := _m.Called(ctx, inner, baseFilters)

	if len(ret) == 0 {
		panic("no return value specified for CreateCommonDecorator")
	}

	var r0 sql_query_decorators.SqlQueryRetriever
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, sql_query_decorators.SqlQueryRetriever, *filters.BaseFilters) (sql_query_decorators.SqlQueryRetriever, error)); ok {
		return rf(ctx, inner, baseFilters)
	}
	if rf, ok := ret.Get(0).(func(context.Context, sql_query_decorators.SqlQueryRetriever, *filters.BaseFilters) sql_query_decorators.SqlQueryRetriever); ok {
		r0 = rf(ctx, inner, baseFilters)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(sql_query_decorators.SqlQueryRetriever)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, sql_query_decorators.SqlQueryRetriever, *filters.BaseFilters) error); ok {
		r1 = rf(ctx, inner, baseFilters)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// commonFactory_CreateCommonDecorator_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateCommonDecorator'
type commonFactory_CreateCommonDecorator_Call struct {
	*mock.Call
}

// CreateCommonDecorator is a helper method to define mock.On call
//   - ctx context.Context
//   - inner sql_query_decorators.SqlQueryRetriever
//   - baseFilters *filters.BaseFilters
func (_e *commonFactory_Expecter) CreateCommonDecorator(ctx interface{}, inner interface{}, baseFilters interface{}) *commonFactory_CreateCommonDecorator_Call {
	return &commonFactory_CreateCommonDecorator_Call{Call: _e.mock.On("CreateCommonDecorator", ctx, inner, baseFilters)}
}

func (_c *commonFactory_CreateCommonDecorator_Call) Run(run func(ctx context.Context, inner sql_query_decorators.SqlQueryRetriever, baseFilters *filters.BaseFilters)) *commonFactory_CreateCommonDecorator_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(sql_query_decorators.SqlQueryRetriever), args[2].(*filters.BaseFilters))
	})
	return _c
}

func (_c *commonFactory_CreateCommonDecorator_Call) Return(_a0 sql_query_decorators.SqlQueryRetriever, _a1 error) *commonFactory_CreateCommonDecorator_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *commonFactory_CreateCommonDecorator_Call) RunAndReturn(run func(context.Context, sql_query_decorators.SqlQueryRetriever, *filters.BaseFilters) (sql_query_decorators.SqlQueryRetriever, error)) *commonFactory_CreateCommonDecorator_Call {
	_c.Call.Return(run)
	return _c
}

// newCommonFactory creates a new instance of CommonFactory. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newCommonFactory(t interface {
	mock.TestingT
	Cleanup(func())
}) *CommonFactory {
	mock := &CommonFactory{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
