// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// OauthService is an autogenerated mock type for the oauthService type
type OauthService struct {
	mock.Mock
}

type OauthService_Expecter struct {
	mock *mock.Mock
}

func (_m *OauthService) EXPECT() *OauthService_Expecter {
	return &OauthService_Expecter{mock: &_m.Mock}
}

// ExchangeCodeForToken provides a mock function with given fields: _a0, _a1
func (_m *OauthService) ExchangeCodeForToken(_a0 context.Context, _a1 string) (string, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for ExchangeCodeForToken")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (string, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OauthService_ExchangeCodeForToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExchangeCodeForToken'
type OauthService_ExchangeCodeForToken_Call struct {
	*mock.Call
}

// ExchangeCodeForToken is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 string
func (_e *OauthService_Expecter) ExchangeCodeForToken(_a0 interface{}, _a1 interface{}) *OauthService_ExchangeCodeForToken_Call {
	return &OauthService_ExchangeCodeForToken_Call{Call: _e.mock.On("ExchangeCodeForToken", _a0, _a1)}
}

func (_c *OauthService_ExchangeCodeForToken_Call) Run(run func(_a0 context.Context, _a1 string)) *OauthService_ExchangeCodeForToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *OauthService_ExchangeCodeForToken_Call) Return(_a0 string, _a1 error) *OauthService_ExchangeCodeForToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *OauthService_ExchangeCodeForToken_Call) RunAndReturn(run func(context.Context, string) (string, error)) *OauthService_ExchangeCodeForToken_Call {
	_c.Call.Return(run)
	return _c
}

// LoginUrl provides a mock function with given fields: _a0
func (_m *OauthService) LoginUrl(_a0 context.Context) (string, string, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for LoginUrl")
	}

	var r0 string
	var r1 string
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context) (string, string, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(context.Context) string); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context) string); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(context.Context) error); ok {
		r2 = rf(_a0)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// OauthService_LoginUrl_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LoginUrl'
type OauthService_LoginUrl_Call struct {
	*mock.Call
}

// LoginUrl is a helper method to define mock.On call
//   - _a0 context.Context
func (_e *OauthService_Expecter) LoginUrl(_a0 interface{}) *OauthService_LoginUrl_Call {
	return &OauthService_LoginUrl_Call{Call: _e.mock.On("LoginUrl", _a0)}
}

func (_c *OauthService_LoginUrl_Call) Run(run func(_a0 context.Context)) *OauthService_LoginUrl_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *OauthService_LoginUrl_Call) Return(_a0 string, _a1 string, _a2 error) *OauthService_LoginUrl_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *OauthService_LoginUrl_Call) RunAndReturn(run func(context.Context) (string, string, error)) *OauthService_LoginUrl_Call {
	_c.Call.Return(run)
	return _c
}

// NewOauthService creates a new instance of OauthService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewOauthService(t interface {
	mock.TestingT
	Cleanup(func())
}) *OauthService {
	mock := &OauthService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
