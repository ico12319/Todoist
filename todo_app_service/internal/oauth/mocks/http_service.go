// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	http "net/http"

	mock "github.com/stretchr/testify/mock"
)

// HttpService is an autogenerated mock type for the httpService type
type HttpService struct {
	mock.Mock
}

type HttpService_Expecter struct {
	mock *mock.Mock
}

func (_m *HttpService) EXPECT() *HttpService_Expecter {
	return &HttpService_Expecter{mock: &_m.Mock}
}

// Redirect provides a mock function with given fields: w, r, url, httpStatusCode
func (_m *HttpService) Redirect(w http.ResponseWriter, r *http.Request, url string, httpStatusCode int) {
	_m.Called(w, r, url, httpStatusCode)
}

// HttpService_Redirect_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Redirect'
type HttpService_Redirect_Call struct {
	*mock.Call
}

// Redirect is a helper method to define mock.On call
//   - w http.ResponseWriter
//   - r *http.Request
//   - url string
//   - httpStatusCode int
func (_e *HttpService_Expecter) Redirect(w interface{}, r interface{}, url interface{}, httpStatusCode interface{}) *HttpService_Redirect_Call {
	return &HttpService_Redirect_Call{Call: _e.mock.On("Redirect", w, r, url, httpStatusCode)}
}

func (_c *HttpService_Redirect_Call) Run(run func(w http.ResponseWriter, r *http.Request, url string, httpStatusCode int)) *HttpService_Redirect_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(http.ResponseWriter), args[1].(*http.Request), args[2].(string), args[3].(int))
	})
	return _c
}

func (_c *HttpService_Redirect_Call) Return() *HttpService_Redirect_Call {
	_c.Call.Return()
	return _c
}

func (_c *HttpService_Redirect_Call) RunAndReturn(run func(http.ResponseWriter, *http.Request, string, int)) *HttpService_Redirect_Call {
	_c.Run(run)
	return _c
}

// SetCookie provides a mock function with given fields: w, cookie
func (_m *HttpService) SetCookie(w http.ResponseWriter, cookie *http.Cookie) {
	_m.Called(w, cookie)
}

// HttpService_SetCookie_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetCookie'
type HttpService_SetCookie_Call struct {
	*mock.Call
}

// SetCookie is a helper method to define mock.On call
//   - w http.ResponseWriter
//   - cookie *http.Cookie
func (_e *HttpService_Expecter) SetCookie(w interface{}, cookie interface{}) *HttpService_SetCookie_Call {
	return &HttpService_SetCookie_Call{Call: _e.mock.On("SetCookie", w, cookie)}
}

func (_c *HttpService_SetCookie_Call) Run(run func(w http.ResponseWriter, cookie *http.Cookie)) *HttpService_SetCookie_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(http.ResponseWriter), args[1].(*http.Cookie))
	})
	return _c
}

func (_c *HttpService_SetCookie_Call) Return() *HttpService_SetCookie_Call {
	_c.Call.Return()
	return _c
}

func (_c *HttpService_SetCookie_Call) RunAndReturn(run func(http.ResponseWriter, *http.Cookie)) *HttpService_SetCookie_Call {
	_c.Run(run)
	return _c
}

// NewHttpService creates a new instance of HttpService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewHttpService(t interface {
	mock.TestingT
	Cleanup(func())
}) *HttpService {
	mock := &HttpService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
