// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	"github.com/I763039/Todo-List/internProject/todo_app_service/internal/graph/model"
	handler_models "github.com/I763039/Todo-List/internProject/todo_app_service/pkg/handler_models"

	mock "github.com/stretchr/testify/mock"

	models "github.com/I763039/Todo-List/internProject/todo_app_service/pkg/models"
)

// userConverter is an autogenerated mock type for the userConverter type
type userConverter struct {
	mock.Mock
}

type userConverter_Expecter struct {
	mock *mock.Mock
}

func (_m *userConverter) EXPECT() *userConverter_Expecter {
	return &userConverter_Expecter{mock: &_m.Mock}
}

// FromCollaboratorInputToAddCollaboratorHandlerModel provides a mock function with given fields: user
func (_m *userConverter) FromCollaboratorInputToAddCollaboratorHandlerModel(user *model.CollaboratorInput) *handler_models.AddCollaborator {
	ret := _m.Called(user)

	if len(ret) == 0 {
		panic("no return value specified for FromCollaboratorInputToAddCollaboratorHandlerModel")
	}

	var r0 *handler_models.AddCollaborator
	if rf, ok := ret.Get(0).(func(*model.CollaboratorInput) *handler_models.AddCollaborator); ok {
		r0 = rf(user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*handler_models.AddCollaborator)
		}
	}

	return r0
}

// userConverter_FromCollaboratorInputToAddCollaboratorHandlerModel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FromCollaboratorInputToAddCollaboratorHandlerModel'
type userConverter_FromCollaboratorInputToAddCollaboratorHandlerModel_Call struct {
	*mock.Call
}

// FromCollaboratorInputToAddCollaboratorHandlerModel is a helper method to define mock.On call
//   - user *model.CollaboratorInput
func (_e *userConverter_Expecter) FromCollaboratorInputToAddCollaboratorHandlerModel(user interface{}) *userConverter_FromCollaboratorInputToAddCollaboratorHandlerModel_Call {
	return &userConverter_FromCollaboratorInputToAddCollaboratorHandlerModel_Call{Call: _e.mock.On("FromCollaboratorInputToAddCollaboratorHandlerModel", user)}
}

func (_c *userConverter_FromCollaboratorInputToAddCollaboratorHandlerModel_Call) Run(run func(user *model.CollaboratorInput)) *userConverter_FromCollaboratorInputToAddCollaboratorHandlerModel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*model.CollaboratorInput))
	})
	return _c
}

func (_c *userConverter_FromCollaboratorInputToAddCollaboratorHandlerModel_Call) Return(_a0 *handler_models.AddCollaborator) *userConverter_FromCollaboratorInputToAddCollaboratorHandlerModel_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *userConverter_FromCollaboratorInputToAddCollaboratorHandlerModel_Call) RunAndReturn(run func(*model.CollaboratorInput) *handler_models.AddCollaborator) *userConverter_FromCollaboratorInputToAddCollaboratorHandlerModel_Call {
	_c.Call.Return(run)
	return _c
}

// ManyToGQL provides a mock function with given fields: users
func (_m *userConverter) ManyToGQL(users []models.User) []*model.User {
	ret := _m.Called(users)

	if len(ret) == 0 {
		panic("no return value specified for ManyToGQL")
	}

	var r0 []*model.User
	if rf, ok := ret.Get(0).(func([]models.User) []*model.User); ok {
		r0 = rf(users)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.User)
		}
	}

	return r0
}

// userConverter_ManyToGQL_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ManyToGQL'
type userConverter_ManyToGQL_Call struct {
	*mock.Call
}

// ManyToGQL is a helper method to define mock.On call
//   - users []models.User
func (_e *userConverter_Expecter) ManyToGQL(users interface{}) *userConverter_ManyToGQL_Call {
	return &userConverter_ManyToGQL_Call{Call: _e.mock.On("ManyToGQL", users)}
}

func (_c *userConverter_ManyToGQL_Call) Run(run func(users []models.User)) *userConverter_ManyToGQL_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]models.User))
	})
	return _c
}

func (_c *userConverter_ManyToGQL_Call) Return(_a0 []*model.User) *userConverter_ManyToGQL_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *userConverter_ManyToGQL_Call) RunAndReturn(run func([]models.User) []*model.User) *userConverter_ManyToGQL_Call {
	_c.Call.Return(run)
	return _c
}

// ToGQL provides a mock function with given fields: user
func (_m *userConverter) ToGQL(user *models.User) *model.User {
	ret := _m.Called(user)

	if len(ret) == 0 {
		panic("no return value specified for ToGQL")
	}

	var r0 *model.User
	if rf, ok := ret.Get(0).(func(*models.User) *model.User); ok {
		r0 = rf(user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}

	return r0
}

// userConverter_ToGQL_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ToGQL'
type userConverter_ToGQL_Call struct {
	*mock.Call
}

// ToGQL is a helper method to define mock.On call
//   - user *models.User
func (_e *userConverter_Expecter) ToGQL(user interface{}) *userConverter_ToGQL_Call {
	return &userConverter_ToGQL_Call{Call: _e.mock.On("ToGQL", user)}
}

func (_c *userConverter_ToGQL_Call) Run(run func(user *models.User)) *userConverter_ToGQL_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*models.User))
	})
	return _c
}

func (_c *userConverter_ToGQL_Call) Return(_a0 *model.User) *userConverter_ToGQL_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *userConverter_ToGQL_Call) RunAndReturn(run func(*models.User) *model.User) *userConverter_ToGQL_Call {
	_c.Call.Return(run)
	return _c
}

// newUserConverter creates a new instance of userConverter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newUserConverter(t interface {
	mock.TestingT
	Cleanup(func())
}) *userConverter {
	mock := &userConverter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
