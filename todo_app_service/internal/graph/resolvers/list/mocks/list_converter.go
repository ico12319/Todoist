// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	"github.com/I763039/Todo-List/internProject/todo_app_service/internal/graph/model"
	handler_models "github.com/I763039/Todo-List/internProject/todo_app_service/pkg/handler_models"

	mock "github.com/stretchr/testify/mock"

	models "github.com/I763039/Todo-List/internProject/todo_app_service/pkg/models"
)

// ListConverter is an autogenerated mock type for the ListConverter type
type ListConverter struct {
	mock.Mock
}

type listConverter_Expecter struct {
	mock *mock.Mock
}

func (_m *ListConverter) EXPECT() *listConverter_Expecter {
	return &listConverter_Expecter{mock: &_m.Mock}
}

// CreateListInputGQLToHandlerModel provides a mock function with given fields: input
func (_m *ListConverter) CreateListInputGQLToHandlerModel(input model.CreateListInput) *handler_models.CreateList {
	ret := _m.Called(input)

	if len(ret) == 0 {
		panic("no return value specified for CreateListInputGQLToHandlerModel")
	}

	var r0 *handler_models.CreateList
	if rf, ok := ret.Get(0).(func(model.CreateListInput) *handler_models.CreateList); ok {
		r0 = rf(input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*handler_models.CreateList)
		}
	}

	return r0
}

// listConverter_CreateListInputGQLToHandlerModel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateListInputGQLToHandlerModel'
type listConverter_CreateListInputGQLToHandlerModel_Call struct {
	*mock.Call
}

// CreateListInputGQLToHandlerModel is a helper method to define mock.On call
//   - input model.CreateListInput
func (_e *listConverter_Expecter) CreateListInputGQLToHandlerModel(input interface{}) *listConverter_CreateListInputGQLToHandlerModel_Call {
	return &listConverter_CreateListInputGQLToHandlerModel_Call{Call: _e.mock.On("CreateListInputGQLToHandlerModel", input)}
}

func (_c *listConverter_CreateListInputGQLToHandlerModel_Call) Run(run func(input model.CreateListInput)) *listConverter_CreateListInputGQLToHandlerModel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(model.CreateListInput))
	})
	return _c
}

func (_c *listConverter_CreateListInputGQLToHandlerModel_Call) Return(_a0 *handler_models.CreateList) *listConverter_CreateListInputGQLToHandlerModel_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *listConverter_CreateListInputGQLToHandlerModel_Call) RunAndReturn(run func(model.CreateListInput) *handler_models.CreateList) *listConverter_CreateListInputGQLToHandlerModel_Call {
	_c.Call.Return(run)
	return _c
}

// FromGQLModelToDeleteListPayload provides a mock function with given fields: _a0, success
func (_m *ListConverter) FromGQLModelToDeleteListPayload(_a0 *model.List, success bool) *model.DeleteListPayload {
	ret := _m.Called(_a0, success)

	if len(ret) == 0 {
		panic("no return value specified for FromGQLModelToDeleteListPayload")
	}

	var r0 *model.DeleteListPayload
	if rf, ok := ret.Get(0).(func(*model.List, bool) *model.DeleteListPayload); ok {
		r0 = rf(_a0, success)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.DeleteListPayload)
		}
	}

	return r0
}

// listConverter_FromGQLModelToDeleteListPayload_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FromGQLModelToDeleteListPayload'
type listConverter_FromGQLModelToDeleteListPayload_Call struct {
	*mock.Call
}

// FromGQLModelToDeleteListPayload is a helper method to define mock.On call
//   - _a0 *model.List
//   - success bool
func (_e *listConverter_Expecter) FromGQLModelToDeleteListPayload(_a0 interface{}, success interface{}) *listConverter_FromGQLModelToDeleteListPayload_Call {
	return &listConverter_FromGQLModelToDeleteListPayload_Call{Call: _e.mock.On("FromGQLModelToDeleteListPayload", _a0, success)}
}

func (_c *listConverter_FromGQLModelToDeleteListPayload_Call) Run(run func(_a0 *model.List, success bool)) *listConverter_FromGQLModelToDeleteListPayload_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*model.List), args[1].(bool))
	})
	return _c
}

func (_c *listConverter_FromGQLModelToDeleteListPayload_Call) Return(_a0 *model.DeleteListPayload) *listConverter_FromGQLModelToDeleteListPayload_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *listConverter_FromGQLModelToDeleteListPayload_Call) RunAndReturn(run func(*model.List, bool) *model.DeleteListPayload) *listConverter_FromGQLModelToDeleteListPayload_Call {
	_c.Call.Return(run)
	return _c
}

// ManyToGQL provides a mock function with given fields: lists
func (_m *ListConverter) ManyToGQL(lists []*models.List) []*model.List {
	ret := _m.Called(lists)

	if len(ret) == 0 {
		panic("no return value specified for ManyToGQL")
	}

	var r0 []*model.List
	if rf, ok := ret.Get(0).(func([]*models.List) []*model.List); ok {
		r0 = rf(lists)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.List)
		}
	}

	return r0
}

// listConverter_ManyToGQL_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ManyToGQL'
type listConverter_ManyToGQL_Call struct {
	*mock.Call
}

// ManyToGQL is a helper method to define mock.On call
//   - lists []*models.List
func (_e *listConverter_Expecter) ManyToGQL(lists interface{}) *listConverter_ManyToGQL_Call {
	return &listConverter_ManyToGQL_Call{Call: _e.mock.On("ManyToGQL", lists)}
}

func (_c *listConverter_ManyToGQL_Call) Run(run func(lists []*models.List)) *listConverter_ManyToGQL_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]*models.List))
	})
	return _c
}

func (_c *listConverter_ManyToGQL_Call) Return(_a0 []*model.List) *listConverter_ManyToGQL_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *listConverter_ManyToGQL_Call) RunAndReturn(run func([]*models.List) []*model.List) *listConverter_ManyToGQL_Call {
	_c.Call.Return(run)
	return _c
}

// ToGQL provides a mock function with given fields: _a0
func (_m *ListConverter) ToGQL(_a0 *models.List) *model.List {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for ToGQL")
	}

	var r0 *model.List
	if rf, ok := ret.Get(0).(func(*models.List) *model.List); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.List)
		}
	}

	return r0
}

// listConverter_ToGQL_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ToGQL'
type listConverter_ToGQL_Call struct {
	*mock.Call
}

// ToGQL is a helper method to define mock.On call
//   - _a0 *models.List
func (_e *listConverter_Expecter) ToGQL(_a0 interface{}) *listConverter_ToGQL_Call {
	return &listConverter_ToGQL_Call{Call: _e.mock.On("ToGQL", _a0)}
}

func (_c *listConverter_ToGQL_Call) Run(run func(_a0 *models.List)) *listConverter_ToGQL_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*models.List))
	})
	return _c
}

func (_c *listConverter_ToGQL_Call) Return(_a0 *model.List) *listConverter_ToGQL_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *listConverter_ToGQL_Call) RunAndReturn(run func(*models.List) *model.List) *listConverter_ToGQL_Call {
	_c.Call.Return(run)
	return _c
}

// ToModel provides a mock function with given fields: _a0
func (_m *ListConverter) ToModel(_a0 *model.List) *models.List {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for ToModel")
	}

	var r0 *models.List
	if rf, ok := ret.Get(0).(func(*model.List) *models.List); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.List)
		}
	}

	return r0
}

// listConverter_ToModel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ToModel'
type listConverter_ToModel_Call struct {
	*mock.Call
}

// ToModel is a helper method to define mock.On call
//   - _a0 *model.List
func (_e *listConverter_Expecter) ToModel(_a0 interface{}) *listConverter_ToModel_Call {
	return &listConverter_ToModel_Call{Call: _e.mock.On("ToModel", _a0)}
}

func (_c *listConverter_ToModel_Call) Run(run func(_a0 *model.List)) *listConverter_ToModel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*model.List))
	})
	return _c
}

func (_c *listConverter_ToModel_Call) Return(_a0 *models.List) *listConverter_ToModel_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *listConverter_ToModel_Call) RunAndReturn(run func(*model.List) *models.List) *listConverter_ToModel_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateListInputGQLToHandlerModel provides a mock function with given fields: input
func (_m *ListConverter) UpdateListInputGQLToHandlerModel(input model.UpdateListInput) *handler_models.UpdateList {
	ret := _m.Called(input)

	if len(ret) == 0 {
		panic("no return value specified for UpdateListInputGQLToHandlerModel")
	}

	var r0 *handler_models.UpdateList
	if rf, ok := ret.Get(0).(func(model.UpdateListInput) *handler_models.UpdateList); ok {
		r0 = rf(input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*handler_models.UpdateList)
		}
	}

	return r0
}

// listConverter_UpdateListInputGQLToHandlerModel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateListInputGQLToHandlerModel'
type listConverter_UpdateListInputGQLToHandlerModel_Call struct {
	*mock.Call
}

// UpdateListInputGQLToHandlerModel is a helper method to define mock.On call
//   - input model.UpdateListInput
func (_e *listConverter_Expecter) UpdateListInputGQLToHandlerModel(input interface{}) *listConverter_UpdateListInputGQLToHandlerModel_Call {
	return &listConverter_UpdateListInputGQLToHandlerModel_Call{Call: _e.mock.On("UpdateListInputGQLToHandlerModel", input)}
}

func (_c *listConverter_UpdateListInputGQLToHandlerModel_Call) Run(run func(input model.UpdateListInput)) *listConverter_UpdateListInputGQLToHandlerModel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(model.UpdateListInput))
	})
	return _c
}

func (_c *listConverter_UpdateListInputGQLToHandlerModel_Call) Return(_a0 *handler_models.UpdateList) *listConverter_UpdateListInputGQLToHandlerModel_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *listConverter_UpdateListInputGQLToHandlerModel_Call) RunAndReturn(run func(model.UpdateListInput) *handler_models.UpdateList) *listConverter_UpdateListInputGQLToHandlerModel_Call {
	_c.Call.Return(run)
	return _c
}

// newListConverter creates a new instance of ListConverter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newListConverter(t interface {
	mock.TestingT
	Cleanup(func())
}) *ListConverter {
	mock := &ListConverter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
