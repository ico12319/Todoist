// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	models "Todo-List/internProject/todo_app_service/pkg/models"
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// UserService is an autogenerated mock type for the userService type
type UserService struct {
	mock.Mock
}

type UserService_Expecter struct {
	mock *mock.Mock
}

func (_m *UserService) EXPECT() *UserService_Expecter {
	return &UserService_Expecter{mock: &_m.Mock}
}

// GetUserRecordByEmail provides a mock function with given fields: _a0, _a1
func (_m *UserService) GetUserRecordByEmail(_a0 context.Context, _a1 string) (*models.User, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetUserRecordByEmail")
	}

	var r0 *models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*models.User, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.User); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserService_GetUserRecordByEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserRecordByEmail'
type UserService_GetUserRecordByEmail_Call struct {
	*mock.Call
}

// GetUserRecordByEmail is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 string
func (_e *UserService_Expecter) GetUserRecordByEmail(_a0 interface{}, _a1 interface{}) *UserService_GetUserRecordByEmail_Call {
	return &UserService_GetUserRecordByEmail_Call{Call: _e.mock.On("GetUserRecordByEmail", _a0, _a1)}
}

func (_c *UserService_GetUserRecordByEmail_Call) Run(run func(_a0 context.Context, _a1 string)) *UserService_GetUserRecordByEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *UserService_GetUserRecordByEmail_Call) Return(_a0 *models.User, _a1 error) *UserService_GetUserRecordByEmail_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserService_GetUserRecordByEmail_Call) RunAndReturn(run func(context.Context, string) (*models.User, error)) *UserService_GetUserRecordByEmail_Call {
	_c.Call.Return(run)
	return _c
}

// NewUserService creates a new instance of UserService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserService(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserService {
	mock := &UserService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
