// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	"internProject/todo_app_service/pkg/models"

	mock "github.com/stretchr/testify/mock"
)

// TodoRepo is an autogenerated mock type for the TodoRepo type
type TodoRepo struct {
	mock.Mock
}

type TodoRepo_Expecter struct {
	mock *mock.Mock
}

func (_m *TodoRepo) EXPECT() *TodoRepo_Expecter {
	return &TodoRepo_Expecter{mock: &_m.Mock}
}

// CreateTodo provides a mock function with given fields: listId, todo
func (_m *TodoRepo) CreateTodo(listId string, todo *models.Todo) (*models.Todo, error) {
	ret := _m.Called(listId, todo)

	if len(ret) == 0 {
		panic("no return value specified for CreateTodo")
	}

	var r0 *models.Todo
	var r1 error
	if rf, ok := ret.Get(0).(func(string, *models.Todo) (*models.Todo, error)); ok {
		return rf(listId, todo)
	}
	if rf, ok := ret.Get(0).(func(string, *models.Todo) *models.Todo); ok {
		r0 = rf(listId, todo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Todo)
		}
	}

	if rf, ok := ret.Get(1).(func(string, *models.Todo) error); ok {
		r1 = rf(listId, todo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TodoRepo_CreateTodo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateTodo'
type TodoRepo_CreateTodo_Call struct {
	*mock.Call
}

// CreateTodo is a helper method to define mock.On call
//   - listId string
//   - todo *models.Todo
func (_e *TodoRepo_Expecter) CreateTodo(listId interface{}, todo interface{}) *TodoRepo_CreateTodo_Call {
	return &TodoRepo_CreateTodo_Call{Call: _e.mock.On("CreateTodo", listId, todo)}
}

func (_c *TodoRepo_CreateTodo_Call) Run(run func(listId string, todo *models.Todo)) *TodoRepo_CreateTodo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(*models.Todo))
	})
	return _c
}

func (_c *TodoRepo_CreateTodo_Call) Return(_a0 *models.Todo, _a1 error) *TodoRepo_CreateTodo_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TodoRepo_CreateTodo_Call) RunAndReturn(run func(string, *models.Todo) (*models.Todo, error)) *TodoRepo_CreateTodo_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteTodo provides a mock function with given fields: listId, todoId
func (_m *TodoRepo) DeleteTodo(listId string, todoId string) error {
	ret := _m.Called(listId, todoId)

	if len(ret) == 0 {
		panic("no return value specified for DeleteTodo")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(listId, todoId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TodoRepo_DeleteTodo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteTodo'
type TodoRepo_DeleteTodo_Call struct {
	*mock.Call
}

// DeleteTodo is a helper method to define mock.On call
//   - listId string
//   - todoId string
func (_e *TodoRepo_Expecter) DeleteTodo(listId interface{}, todoId interface{}) *TodoRepo_DeleteTodo_Call {
	return &TodoRepo_DeleteTodo_Call{Call: _e.mock.On("DeleteTodo", listId, todoId)}
}

func (_c *TodoRepo_DeleteTodo_Call) Run(run func(listId string, todoId string)) *TodoRepo_DeleteTodo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *TodoRepo_DeleteTodo_Call) Return(_a0 error) *TodoRepo_DeleteTodo_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *TodoRepo_DeleteTodo_Call) RunAndReturn(run func(string, string) error) *TodoRepo_DeleteTodo_Call {
	_c.Call.Return(run)
	return _c
}

// GetTodo provides a mock function with given fields: listId, todoId
func (_m *TodoRepo) GetTodo(listId string, todoId string) (*models.Todo, error) {
	ret := _m.Called(listId, todoId)

	if len(ret) == 0 {
		panic("no return value specified for GetTodo")
	}

	var r0 *models.Todo
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (*models.Todo, error)); ok {
		return rf(listId, todoId)
	}
	if rf, ok := ret.Get(0).(func(string, string) *models.Todo); ok {
		r0 = rf(listId, todoId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Todo)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(listId, todoId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TodoRepo_GetTodo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTodo'
type TodoRepo_GetTodo_Call struct {
	*mock.Call
}

// GetTodo is a helper method to define mock.On call
//   - listId string
//   - todoId string
func (_e *TodoRepo_Expecter) GetTodo(listId interface{}, todoId interface{}) *TodoRepo_GetTodo_Call {
	return &TodoRepo_GetTodo_Call{Call: _e.mock.On("GetTodo", listId, todoId)}
}

func (_c *TodoRepo_GetTodo_Call) Run(run func(listId string, todoId string)) *TodoRepo_GetTodo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *TodoRepo_GetTodo_Call) Return(_a0 *models.Todo, _a1 error) *TodoRepo_GetTodo_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TodoRepo_GetTodo_Call) RunAndReturn(run func(string, string) (*models.Todo, error)) *TodoRepo_GetTodo_Call {
	_c.Call.Return(run)
	return _c
}

// GetTodosByListId provides a mock function with given fields: listId
func (_m *TodoRepo) GetTodosByListId(listId string) ([]*models.Todo, error) {
	ret := _m.Called(listId)

	if len(ret) == 0 {
		panic("no return value specified for GetTodosByListId")
	}

	var r0 []*models.Todo
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]*models.Todo, error)); ok {
		return rf(listId)
	}
	if rf, ok := ret.Get(0).(func(string) []*models.Todo); ok {
		r0 = rf(listId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Todo)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(listId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TodoRepo_GetTodosByListId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTodosByListId'
type TodoRepo_GetTodosByListId_Call struct {
	*mock.Call
}

// GetTodosByListId is a helper method to define mock.On call
//   - listId string
func (_e *TodoRepo_Expecter) GetTodosByListId(listId interface{}) *TodoRepo_GetTodosByListId_Call {
	return &TodoRepo_GetTodosByListId_Call{Call: _e.mock.On("GetTodosByListId", listId)}
}

func (_c *TodoRepo_GetTodosByListId_Call) Run(run func(listId string)) *TodoRepo_GetTodosByListId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *TodoRepo_GetTodosByListId_Call) Return(_a0 []*models.Todo, _a1 error) *TodoRepo_GetTodosByListId_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TodoRepo_GetTodosByListId_Call) RunAndReturn(run func(string) ([]*models.Todo, error)) *TodoRepo_GetTodosByListId_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateTodo provides a mock function with given fields: listId, todoId, todo
func (_m *TodoRepo) UpdateTodo(listId string, todoId string, todo *models.Todo) error {
	ret := _m.Called(listId, todoId, todo)

	if len(ret) == 0 {
		panic("no return value specified for UpdateTodo")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, *models.Todo) error); ok {
		r0 = rf(listId, todoId, todo)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TodoRepo_UpdateTodo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateTodo'
type TodoRepo_UpdateTodo_Call struct {
	*mock.Call
}

// UpdateTodo is a helper method to define mock.On call
//   - listId string
//   - todoId string
//   - todo *models.Todo
func (_e *TodoRepo_Expecter) UpdateTodo(listId interface{}, todoId interface{}, todo interface{}) *TodoRepo_UpdateTodo_Call {
	return &TodoRepo_UpdateTodo_Call{Call: _e.mock.On("UpdateTodo", listId, todoId, todo)}
}

func (_c *TodoRepo_UpdateTodo_Call) Run(run func(listId string, todoId string, todo *models.Todo)) *TodoRepo_UpdateTodo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(*models.Todo))
	})
	return _c
}

func (_c *TodoRepo_UpdateTodo_Call) Return(_a0 error) *TodoRepo_UpdateTodo_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *TodoRepo_UpdateTodo_Call) RunAndReturn(run func(string, string, *models.Todo) error) *TodoRepo_UpdateTodo_Call {
	_c.Call.Return(run)
	return _c
}

// NewTodoRepo creates a new instance of TodoRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTodoRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *TodoRepo {
	mock := &TodoRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
