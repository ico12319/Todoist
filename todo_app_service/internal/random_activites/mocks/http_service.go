// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"
	http "net/http"

	io "io"

	mock "github.com/stretchr/testify/mock"
)

// HttpService is an autogenerated mock type for the httpService type
type HttpService struct {
	mock.Mock
}

type HttpService_Expecter struct {
	mock *mock.Mock
}

func (_m *HttpService) EXPECT() *HttpService_Expecter {
	return &HttpService_Expecter{mock: &_m.Mock}
}

// GetHttpResponse provides a mock function with given fields: ctx, httpMethod, url, body
func (_m *HttpService) GetHttpResponse(ctx context.Context, httpMethod string, url string, body io.Reader) (*http.Response, error) {
	ret := _m.Called(ctx, httpMethod, url, body)

	if len(ret) == 0 {
		panic("no return value specified for GetHttpResponse")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, io.Reader) (*http.Response, error)); ok {
		return rf(ctx, httpMethod, url, body)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, io.Reader) *http.Response); ok {
		r0 = rf(ctx, httpMethod, url, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, io.Reader) error); ok {
		r1 = rf(ctx, httpMethod, url, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HttpService_GetHttpResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetHttpResponse'
type HttpService_GetHttpResponse_Call struct {
	*mock.Call
}

// GetHttpResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - httpMethod string
//   - url string
//   - body io.Reader
func (_e *HttpService_Expecter) GetHttpResponse(ctx interface{}, httpMethod interface{}, url interface{}, body interface{}) *HttpService_GetHttpResponse_Call {
	return &HttpService_GetHttpResponse_Call{Call: _e.mock.On("GetHttpResponse", ctx, httpMethod, url, body)}
}

func (_c *HttpService_GetHttpResponse_Call) Run(run func(ctx context.Context, httpMethod string, url string, body io.Reader)) *HttpService_GetHttpResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(io.Reader))
	})
	return _c
}

func (_c *HttpService_GetHttpResponse_Call) Return(_a0 *http.Response, _a1 error) *HttpService_GetHttpResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *HttpService_GetHttpResponse_Call) RunAndReturn(run func(context.Context, string, string, io.Reader) (*http.Response, error)) *HttpService_GetHttpResponse_Call {
	_c.Call.Return(run)
	return _c
}

// NewHttpService creates a new instance of HttpService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewHttpService(t interface {
	mock.TestingT
	Cleanup(func())
}) *HttpService {
	mock := &HttpService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
