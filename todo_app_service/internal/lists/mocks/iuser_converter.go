// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	"internProject/todo_app_service/internal/entities"
	"internProject/todo_app_service/pkg/models"

	mock "github.com/stretchr/testify/mock"
)

// IUserConverter is an autogenerated mock type for the IUserConverter type
type IUserConverter struct {
	mock.Mock
}

type IUserConverter_Expecter struct {
	mock *mock.Mock
}

func (_m *IUserConverter) EXPECT() *IUserConverter_Expecter {
	return &IUserConverter_Expecter{mock: &_m.Mock}
}

// ConvertFromDBEntityToModel provides a mock function with given fields: user
func (_m *IUserConverter) ConvertFromDBEntityToModel(user *entities.User) *models.User {
	ret := _m.Called(user)

	if len(ret) == 0 {
		panic("no return value specified for ConvertFromDBEntityToModel")
	}

	var r0 *models.User
	if rf, ok := ret.Get(0).(func(*entities.User) *models.User); ok {
		r0 = rf(user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}

	return r0
}

// IUserConverter_ConvertFromDBEntityToModel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ConvertFromDBEntityToModel'
type IUserConverter_ConvertFromDBEntityToModel_Call struct {
	*mock.Call
}

// ConvertFromDBEntityToModel is a helper method to define mock.On call
//   - user *entities.User
func (_e *IUserConverter_Expecter) ConvertFromDBEntityToModel(user interface{}) *IUserConverter_ConvertFromDBEntityToModel_Call {
	return &IUserConverter_ConvertFromDBEntityToModel_Call{Call: _e.mock.On("ConvertFromDBEntityToModel", user)}
}

func (_c *IUserConverter_ConvertFromDBEntityToModel_Call) Run(run func(user *entities.User)) *IUserConverter_ConvertFromDBEntityToModel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*entities.User))
	})
	return _c
}

func (_c *IUserConverter_ConvertFromDBEntityToModel_Call) Return(_a0 *models.User) *IUserConverter_ConvertFromDBEntityToModel_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IUserConverter_ConvertFromDBEntityToModel_Call) RunAndReturn(run func(*entities.User) *models.User) *IUserConverter_ConvertFromDBEntityToModel_Call {
	_c.Call.Return(run)
	return _c
}

// ConvertFromModelToEntity provides a mock function with given fields: user
func (_m *IUserConverter) ConvertFromModelToEntity(user *models.User) *entities.User {
	ret := _m.Called(user)

	if len(ret) == 0 {
		panic("no return value specified for ConvertFromModelToEntity")
	}

	var r0 *entities.User
	if rf, ok := ret.Get(0).(func(*models.User) *entities.User); ok {
		r0 = rf(user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.User)
		}
	}

	return r0
}

// IUserConverter_ConvertFromModelToEntity_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ConvertFromModelToEntity'
type IUserConverter_ConvertFromModelToEntity_Call struct {
	*mock.Call
}

// ConvertFromModelToEntity is a helper method to define mock.On call
//   - user *models.User
func (_e *IUserConverter_Expecter) ConvertFromModelToEntity(user interface{}) *IUserConverter_ConvertFromModelToEntity_Call {
	return &IUserConverter_ConvertFromModelToEntity_Call{Call: _e.mock.On("ConvertFromModelToEntity", user)}
}

func (_c *IUserConverter_ConvertFromModelToEntity_Call) Run(run func(user *models.User)) *IUserConverter_ConvertFromModelToEntity_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*models.User))
	})
	return _c
}

func (_c *IUserConverter_ConvertFromModelToEntity_Call) Return(_a0 *entities.User) *IUserConverter_ConvertFromModelToEntity_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IUserConverter_ConvertFromModelToEntity_Call) RunAndReturn(run func(*models.User) *entities.User) *IUserConverter_ConvertFromModelToEntity_Call {
	_c.Call.Return(run)
	return _c
}

// NewIUserConverter creates a new instance of IUserConverter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIUserConverter(t interface {
	mock.TestingT
	Cleanup(func())
}) *IUserConverter {
	mock := &IUserConverter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
