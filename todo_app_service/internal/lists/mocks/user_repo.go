// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	uuid "github.com/gofrs/uuid"
	mock "github.com/stretchr/testify/mock"
)

// UserRepo is an autogenerated mock type for the UserRepo type
type UserRepo struct {
	mock.Mock
}

type UserRepo_Expecter struct {
	mock *mock.Mock
}

func (_m *UserRepo) EXPECT() *UserRepo_Expecter {
	return &UserRepo_Expecter{mock: &_m.Mock}
}

// GetUserIdByEmail provides a mock function with given fields: email
func (_m *UserRepo) GetUserIdByEmail(email string) (uuid.UUID, error) {
	ret := _m.Called(email)

	if len(ret) == 0 {
		panic("no return value specified for GetUserIdByEmail")
	}

	var r0 uuid.UUID
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (uuid.UUID, error)); ok {
		return rf(email)
	}
	if rf, ok := ret.Get(0).(func(string) uuid.UUID); ok {
		r0 = rf(email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(uuid.UUID)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserRepo_GetUserIdByEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserIdByEmail'
type UserRepo_GetUserIdByEmail_Call struct {
	*mock.Call
}

// GetUserIdByEmail is a helper method to define mock.On call
//   - email string
func (_e *UserRepo_Expecter) GetUserIdByEmail(email interface{}) *UserRepo_GetUserIdByEmail_Call {
	return &UserRepo_GetUserIdByEmail_Call{Call: _e.mock.On("GetUserIdByEmail", email)}
}

func (_c *UserRepo_GetUserIdByEmail_Call) Run(run func(email string)) *UserRepo_GetUserIdByEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *UserRepo_GetUserIdByEmail_Call) Return(_a0 uuid.UUID, _a1 error) *UserRepo_GetUserIdByEmail_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserRepo_GetUserIdByEmail_Call) RunAndReturn(run func(string) (uuid.UUID, error)) *UserRepo_GetUserIdByEmail_Call {
	_c.Call.Return(run)
	return _c
}

// NewUserRepo creates a new instance of UserRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserRepo {
	mock := &UserRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
