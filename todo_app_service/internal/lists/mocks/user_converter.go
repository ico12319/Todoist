// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	entities "Todo-List/internProject/todo_app_service/internal/entities"

	mock "github.com/stretchr/testify/mock"

	models "Todo-List/internProject/todo_app_service/pkg/models"
)

// UserConverter is an autogenerated mock type for the userConverter type
type UserConverter struct {
	mock.Mock
}

type UserConverter_Expecter struct {
	mock *mock.Mock
}

func (_m *UserConverter) EXPECT() *UserConverter_Expecter {
	return &UserConverter_Expecter{mock: &_m.Mock}
}

// ConvertFromDBEntityToModel provides a mock function with given fields: _a0
func (_m *UserConverter) ConvertFromDBEntityToModel(_a0 *entities.User) *models.User {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for ConvertFromDBEntityToModel")
	}

	var r0 *models.User
	if rf, ok := ret.Get(0).(func(*entities.User) *models.User); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}

	return r0
}

// UserConverter_ConvertFromDBEntityToModel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ConvertFromDBEntityToModel'
type UserConverter_ConvertFromDBEntityToModel_Call struct {
	*mock.Call
}

// ConvertFromDBEntityToModel is a helper method to define mock.On call
//   - _a0 *entities.User
func (_e *UserConverter_Expecter) ConvertFromDBEntityToModel(_a0 interface{}) *UserConverter_ConvertFromDBEntityToModel_Call {
	return &UserConverter_ConvertFromDBEntityToModel_Call{Call: _e.mock.On("ConvertFromDBEntityToModel", _a0)}
}

func (_c *UserConverter_ConvertFromDBEntityToModel_Call) Run(run func(_a0 *entities.User)) *UserConverter_ConvertFromDBEntityToModel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*entities.User))
	})
	return _c
}

func (_c *UserConverter_ConvertFromDBEntityToModel_Call) Return(_a0 *models.User) *UserConverter_ConvertFromDBEntityToModel_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UserConverter_ConvertFromDBEntityToModel_Call) RunAndReturn(run func(*entities.User) *models.User) *UserConverter_ConvertFromDBEntityToModel_Call {
	_c.Call.Return(run)
	return _c
}

// ConvertFromModelToEntity provides a mock function with given fields: _a0
func (_m *UserConverter) ConvertFromModelToEntity(_a0 *models.User) *entities.User {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for ConvertFromModelToEntity")
	}

	var r0 *entities.User
	if rf, ok := ret.Get(0).(func(*models.User) *entities.User); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.User)
		}
	}

	return r0
}

// UserConverter_ConvertFromModelToEntity_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ConvertFromModelToEntity'
type UserConverter_ConvertFromModelToEntity_Call struct {
	*mock.Call
}

// ConvertFromModelToEntity is a helper method to define mock.On call
//   - _a0 *models.User
func (_e *UserConverter_Expecter) ConvertFromModelToEntity(_a0 interface{}) *UserConverter_ConvertFromModelToEntity_Call {
	return &UserConverter_ConvertFromModelToEntity_Call{Call: _e.mock.On("ConvertFromModelToEntity", _a0)}
}

func (_c *UserConverter_ConvertFromModelToEntity_Call) Run(run func(_a0 *models.User)) *UserConverter_ConvertFromModelToEntity_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*models.User))
	})
	return _c
}

func (_c *UserConverter_ConvertFromModelToEntity_Call) Return(_a0 *entities.User) *UserConverter_ConvertFromModelToEntity_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UserConverter_ConvertFromModelToEntity_Call) RunAndReturn(run func(*models.User) *entities.User) *UserConverter_ConvertFromModelToEntity_Call {
	_c.Call.Return(run)
	return _c
}

// ManyToModel provides a mock function with given fields: _a0
func (_m *UserConverter) ManyToModel(_a0 []entities.User) []*models.User {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for ManyToModel")
	}

	var r0 []*models.User
	if rf, ok := ret.Get(0).(func([]entities.User) []*models.User); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.User)
		}
	}

	return r0
}

// UserConverter_ManyToModel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ManyToModel'
type UserConverter_ManyToModel_Call struct {
	*mock.Call
}

// ManyToModel is a helper method to define mock.On call
//   - _a0 []entities.User
func (_e *UserConverter_Expecter) ManyToModel(_a0 interface{}) *UserConverter_ManyToModel_Call {
	return &UserConverter_ManyToModel_Call{Call: _e.mock.On("ManyToModel", _a0)}
}

func (_c *UserConverter_ManyToModel_Call) Run(run func(_a0 []entities.User)) *UserConverter_ManyToModel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]entities.User))
	})
	return _c
}

func (_c *UserConverter_ManyToModel_Call) Return(_a0 []*models.User) *UserConverter_ManyToModel_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UserConverter_ManyToModel_Call) RunAndReturn(run func([]entities.User) []*models.User) *UserConverter_ManyToModel_Call {
	_c.Call.Return(run)
	return _c
}

// NewUserConverter creates a new instance of UserConverter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserConverter(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserConverter {
	mock := &UserConverter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
