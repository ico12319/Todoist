// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	entities "Todo-List/internProject/todo_app_service/internal/entities"
	handler_models "Todo-List/internProject/todo_app_service/pkg/handler_models"

	mock "github.com/stretchr/testify/mock"

	models "Todo-List/internProject/todo_app_service/pkg/models"
)

// ListConverter is an autogenerated mock type for the listConverter type
type ListConverter struct {
	mock.Mock
}

type ListConverter_Expecter struct {
	mock *mock.Mock
}

func (_m *ListConverter) EXPECT() *ListConverter_Expecter {
	return &ListConverter_Expecter{mock: &_m.Mock}
}

// ConvertFromDBEntityToModel provides a mock function with given fields: _a0
func (_m *ListConverter) ConvertFromDBEntityToModel(_a0 *entities.List) *models.List {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for ConvertFromDBEntityToModel")
	}

	var r0 *models.List
	if rf, ok := ret.Get(0).(func(*entities.List) *models.List); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.List)
		}
	}

	return r0
}

// ListConverter_ConvertFromDBEntityToModel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ConvertFromDBEntityToModel'
type ListConverter_ConvertFromDBEntityToModel_Call struct {
	*mock.Call
}

// ConvertFromDBEntityToModel is a helper method to define mock.On call
//   - _a0 *entities.List
func (_e *ListConverter_Expecter) ConvertFromDBEntityToModel(_a0 interface{}) *ListConverter_ConvertFromDBEntityToModel_Call {
	return &ListConverter_ConvertFromDBEntityToModel_Call{Call: _e.mock.On("ConvertFromDBEntityToModel", _a0)}
}

func (_c *ListConverter_ConvertFromDBEntityToModel_Call) Run(run func(_a0 *entities.List)) *ListConverter_ConvertFromDBEntityToModel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*entities.List))
	})
	return _c
}

func (_c *ListConverter_ConvertFromDBEntityToModel_Call) Return(_a0 *models.List) *ListConverter_ConvertFromDBEntityToModel_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ListConverter_ConvertFromDBEntityToModel_Call) RunAndReturn(run func(*entities.List) *models.List) *ListConverter_ConvertFromDBEntityToModel_Call {
	_c.Call.Return(run)
	return _c
}

// ConvertFromModelToDBEntity provides a mock function with given fields: _a0
func (_m *ListConverter) ConvertFromModelToDBEntity(_a0 *models.List) *entities.List {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for ConvertFromModelToDBEntity")
	}

	var r0 *entities.List
	if rf, ok := ret.Get(0).(func(*models.List) *entities.List); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.List)
		}
	}

	return r0
}

// ListConverter_ConvertFromModelToDBEntity_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ConvertFromModelToDBEntity'
type ListConverter_ConvertFromModelToDBEntity_Call struct {
	*mock.Call
}

// ConvertFromModelToDBEntity is a helper method to define mock.On call
//   - _a0 *models.List
func (_e *ListConverter_Expecter) ConvertFromModelToDBEntity(_a0 interface{}) *ListConverter_ConvertFromModelToDBEntity_Call {
	return &ListConverter_ConvertFromModelToDBEntity_Call{Call: _e.mock.On("ConvertFromModelToDBEntity", _a0)}
}

func (_c *ListConverter_ConvertFromModelToDBEntity_Call) Run(run func(_a0 *models.List)) *ListConverter_ConvertFromModelToDBEntity_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*models.List))
	})
	return _c
}

func (_c *ListConverter_ConvertFromModelToDBEntity_Call) Return(_a0 *entities.List) *ListConverter_ConvertFromModelToDBEntity_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ListConverter_ConvertFromModelToDBEntity_Call) RunAndReturn(run func(*models.List) *entities.List) *ListConverter_ConvertFromModelToDBEntity_Call {
	_c.Call.Return(run)
	return _c
}

// FromCreateHandlerModelToModel provides a mock function with given fields: _a0
func (_m *ListConverter) FromCreateHandlerModelToModel(_a0 *handler_models.CreateList) *models.List {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for FromCreateHandlerModelToModel")
	}

	var r0 *models.List
	if rf, ok := ret.Get(0).(func(*handler_models.CreateList) *models.List); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.List)
		}
	}

	return r0
}

// ListConverter_FromCreateHandlerModelToModel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FromCreateHandlerModelToModel'
type ListConverter_FromCreateHandlerModelToModel_Call struct {
	*mock.Call
}

// FromCreateHandlerModelToModel is a helper method to define mock.On call
//   - _a0 *handler_models.CreateList
func (_e *ListConverter_Expecter) FromCreateHandlerModelToModel(_a0 interface{}) *ListConverter_FromCreateHandlerModelToModel_Call {
	return &ListConverter_FromCreateHandlerModelToModel_Call{Call: _e.mock.On("FromCreateHandlerModelToModel", _a0)}
}

func (_c *ListConverter_FromCreateHandlerModelToModel_Call) Run(run func(_a0 *handler_models.CreateList)) *ListConverter_FromCreateHandlerModelToModel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*handler_models.CreateList))
	})
	return _c
}

func (_c *ListConverter_FromCreateHandlerModelToModel_Call) Return(_a0 *models.List) *ListConverter_FromCreateHandlerModelToModel_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ListConverter_FromCreateHandlerModelToModel_Call) RunAndReturn(run func(*handler_models.CreateList) *models.List) *ListConverter_FromCreateHandlerModelToModel_Call {
	_c.Call.Return(run)
	return _c
}

// FromUpdateHandlerModelToModel provides a mock function with given fields: _a0
func (_m *ListConverter) FromUpdateHandlerModelToModel(_a0 *handler_models.UpdateList) *models.List {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for FromUpdateHandlerModelToModel")
	}

	var r0 *models.List
	if rf, ok := ret.Get(0).(func(*handler_models.UpdateList) *models.List); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.List)
		}
	}

	return r0
}

// ListConverter_FromUpdateHandlerModelToModel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FromUpdateHandlerModelToModel'
type ListConverter_FromUpdateHandlerModelToModel_Call struct {
	*mock.Call
}

// FromUpdateHandlerModelToModel is a helper method to define mock.On call
//   - _a0 *handler_models.UpdateList
func (_e *ListConverter_Expecter) FromUpdateHandlerModelToModel(_a0 interface{}) *ListConverter_FromUpdateHandlerModelToModel_Call {
	return &ListConverter_FromUpdateHandlerModelToModel_Call{Call: _e.mock.On("FromUpdateHandlerModelToModel", _a0)}
}

func (_c *ListConverter_FromUpdateHandlerModelToModel_Call) Run(run func(_a0 *handler_models.UpdateList)) *ListConverter_FromUpdateHandlerModelToModel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*handler_models.UpdateList))
	})
	return _c
}

func (_c *ListConverter_FromUpdateHandlerModelToModel_Call) Return(_a0 *models.List) *ListConverter_FromUpdateHandlerModelToModel_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ListConverter_FromUpdateHandlerModelToModel_Call) RunAndReturn(run func(*handler_models.UpdateList) *models.List) *ListConverter_FromUpdateHandlerModelToModel_Call {
	_c.Call.Return(run)
	return _c
}

// ManyToModel provides a mock function with given fields: _a0
func (_m *ListConverter) ManyToModel(_a0 []entities.List) []*models.List {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for ManyToModel")
	}

	var r0 []*models.List
	if rf, ok := ret.Get(0).(func([]entities.List) []*models.List); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.List)
		}
	}

	return r0
}

// ListConverter_ManyToModel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ManyToModel'
type ListConverter_ManyToModel_Call struct {
	*mock.Call
}

// ManyToModel is a helper method to define mock.On call
//   - _a0 []entities.List
func (_e *ListConverter_Expecter) ManyToModel(_a0 interface{}) *ListConverter_ManyToModel_Call {
	return &ListConverter_ManyToModel_Call{Call: _e.mock.On("ManyToModel", _a0)}
}

func (_c *ListConverter_ManyToModel_Call) Run(run func(_a0 []entities.List)) *ListConverter_ManyToModel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]entities.List))
	})
	return _c
}

func (_c *ListConverter_ManyToModel_Call) Return(_a0 []*models.List) *ListConverter_ManyToModel_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ListConverter_ManyToModel_Call) RunAndReturn(run func([]entities.List) []*models.List) *ListConverter_ManyToModel_Call {
	_c.Call.Return(run)
	return _c
}

// NewListConverter creates a new instance of ListConverter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewListConverter(t interface {
	mock.TestingT
	Cleanup(func())
}) *ListConverter {
	mock := &ListConverter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
