// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	entities2 "internProject/todo_app_service/internal/entities"

	mock "github.com/stretchr/testify/mock"
)

// ListRepo is an autogenerated mock type for the ListRepo type
type ListRepo struct {
	mock.Mock
}

type ListRepo_Expecter struct {
	mock *mock.Mock
}

func (_m *ListRepo) EXPECT() *ListRepo_Expecter {
	return &ListRepo_Expecter{mock: &_m.Mock}
}

// CreateList provides a mock function with given fields: entity
func (_m *ListRepo) CreateList(entity *entities2.List) (*entities2.List, error) {
	ret := _m.Called(entity)

	if len(ret) == 0 {
		panic("no return value specified for CreateList")
	}

	var r0 *entities2.List
	var r1 error
	if rf, ok := ret.Get(0).(func(*entities2.List) (*entities2.List, error)); ok {
		return rf(entity)
	}
	if rf, ok := ret.Get(0).(func(*entities2.List) *entities2.List); ok {
		r0 = rf(entity)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities2.List)
		}
	}

	if rf, ok := ret.Get(1).(func(*entities2.List) error); ok {
		r1 = rf(entity)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListRepo_CreateList_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateList'
type ListRepo_CreateList_Call struct {
	*mock.Call
}

// CreateList is a helper method to define mock.On call
//   - entity *entities.List
func (_e *ListRepo_Expecter) CreateList(entity interface{}) *ListRepo_CreateList_Call {
	return &ListRepo_CreateList_Call{Call: _e.mock.On("CreateList", entity)}
}

func (_c *ListRepo_CreateList_Call) Run(run func(entity *entities2.List)) *ListRepo_CreateList_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*entities2.List))
	})
	return _c
}

func (_c *ListRepo_CreateList_Call) Return(_a0 *entities2.List, _a1 error) *ListRepo_CreateList_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ListRepo_CreateList_Call) RunAndReturn(run func(*entities2.List) (*entities2.List, error)) *ListRepo_CreateList_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteList provides a mock function with given fields: listID
func (_m *ListRepo) DeleteList(listID string) error {
	ret := _m.Called(listID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteList")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(listID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListRepo_DeleteList_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteList'
type ListRepo_DeleteList_Call struct {
	*mock.Call
}

// DeleteList is a helper method to define mock.On call
//   - listID string
func (_e *ListRepo_Expecter) DeleteList(listID interface{}) *ListRepo_DeleteList_Call {
	return &ListRepo_DeleteList_Call{Call: _e.mock.On("DeleteList", listID)}
}

func (_c *ListRepo_DeleteList_Call) Run(run func(listID string)) *ListRepo_DeleteList_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *ListRepo_DeleteList_Call) Return(_a0 error) *ListRepo_DeleteList_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ListRepo_DeleteList_Call) RunAndReturn(run func(string) error) *ListRepo_DeleteList_Call {
	_c.Call.Return(run)
	return _c
}

// GetList provides a mock function with given fields: listId
func (_m *ListRepo) GetList(listId string) (*entities2.List, error) {
	ret := _m.Called(listId)

	if len(ret) == 0 {
		panic("no return value specified for GetList")
	}

	var r0 *entities2.List
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*entities2.List, error)); ok {
		return rf(listId)
	}
	if rf, ok := ret.Get(0).(func(string) *entities2.List); ok {
		r0 = rf(listId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities2.List)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(listId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListRepo_GetList_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetList'
type ListRepo_GetList_Call struct {
	*mock.Call
}

// GetList is a helper method to define mock.On call
//   - listId string
func (_e *ListRepo_Expecter) GetList(listId interface{}) *ListRepo_GetList_Call {
	return &ListRepo_GetList_Call{Call: _e.mock.On("GetList", listId)}
}

func (_c *ListRepo_GetList_Call) Run(run func(listId string)) *ListRepo_GetList_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *ListRepo_GetList_Call) Return(_a0 *entities2.List, _a1 error) *ListRepo_GetList_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ListRepo_GetList_Call) RunAndReturn(run func(string) (*entities2.List, error)) *ListRepo_GetList_Call {
	_c.Call.Return(run)
	return _c
}

// GetListCollaborators provides a mock function with given fields: listId
func (_m *ListRepo) GetListCollaborators(listId string) ([]entities2.User, error) {
	ret := _m.Called(listId)

	if len(ret) == 0 {
		panic("no return value specified for GetListCollaborators")
	}

	var r0 []entities2.User
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]entities2.User, error)); ok {
		return rf(listId)
	}
	if rf, ok := ret.Get(0).(func(string) []entities2.User); ok {
		r0 = rf(listId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entities2.User)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(listId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListRepo_GetListCollaborators_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetListCollaborators'
type ListRepo_GetListCollaborators_Call struct {
	*mock.Call
}

// GetListCollaborators is a helper method to define mock.On call
//   - listId string
func (_e *ListRepo_Expecter) GetListCollaborators(listId interface{}) *ListRepo_GetListCollaborators_Call {
	return &ListRepo_GetListCollaborators_Call{Call: _e.mock.On("GetListCollaborators", listId)}
}

func (_c *ListRepo_GetListCollaborators_Call) Run(run func(listId string)) *ListRepo_GetListCollaborators_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *ListRepo_GetListCollaborators_Call) Return(_a0 []entities2.User, _a1 error) *ListRepo_GetListCollaborators_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ListRepo_GetListCollaborators_Call) RunAndReturn(run func(string) ([]entities2.User, error)) *ListRepo_GetListCollaborators_Call {
	_c.Call.Return(run)
	return _c
}

// GetListOwner provides a mock function with given fields: listId
func (_m *ListRepo) GetListOwner(listId string) (*entities2.User, error) {
	ret := _m.Called(listId)

	if len(ret) == 0 {
		panic("no return value specified for GetListOwner")
	}

	var r0 *entities2.User
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*entities2.User, error)); ok {
		return rf(listId)
	}
	if rf, ok := ret.Get(0).(func(string) *entities2.User); ok {
		r0 = rf(listId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities2.User)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(listId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListRepo_GetListOwner_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetListOwner'
type ListRepo_GetListOwner_Call struct {
	*mock.Call
}

// GetListOwner is a helper method to define mock.On call
//   - listId string
func (_e *ListRepo_Expecter) GetListOwner(listId interface{}) *ListRepo_GetListOwner_Call {
	return &ListRepo_GetListOwner_Call{Call: _e.mock.On("GetListOwner", listId)}
}

func (_c *ListRepo_GetListOwner_Call) Run(run func(listId string)) *ListRepo_GetListOwner_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *ListRepo_GetListOwner_Call) Return(_a0 *entities2.User, _a1 error) *ListRepo_GetListOwner_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ListRepo_GetListOwner_Call) RunAndReturn(run func(string) (*entities2.User, error)) *ListRepo_GetListOwner_Call {
	_c.Call.Return(run)
	return _c
}

// GetLists provides a mock function with no fields
func (_m *ListRepo) GetLists() ([]entities2.List, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetLists")
	}

	var r0 []entities2.List
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]entities2.List, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []entities2.List); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entities2.List)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListRepo_GetLists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLists'
type ListRepo_GetLists_Call struct {
	*mock.Call
}

// GetLists is a helper method to define mock.On call
func (_e *ListRepo_Expecter) GetLists() *ListRepo_GetLists_Call {
	return &ListRepo_GetLists_Call{Call: _e.mock.On("GetLists")}
}

func (_c *ListRepo_GetLists_Call) Run(run func()) *ListRepo_GetLists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ListRepo_GetLists_Call) Return(_a0 []entities2.List, _a1 error) *ListRepo_GetLists_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ListRepo_GetLists_Call) RunAndReturn(run func() ([]entities2.List, error)) *ListRepo_GetLists_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateListName provides a mock function with given fields: listId, name
func (_m *ListRepo) UpdateListName(listId string, name string) error {
	ret := _m.Called(listId, name)

	if len(ret) == 0 {
		panic("no return value specified for UpdateListName")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(listId, name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListRepo_UpdateListName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateListName'
type ListRepo_UpdateListName_Call struct {
	*mock.Call
}

// UpdateListName is a helper method to define mock.On call
//   - listId string
//   - name string
func (_e *ListRepo_Expecter) UpdateListName(listId interface{}, name interface{}) *ListRepo_UpdateListName_Call {
	return &ListRepo_UpdateListName_Call{Call: _e.mock.On("UpdateListName", listId, name)}
}

func (_c *ListRepo_UpdateListName_Call) Run(run func(listId string, name string)) *ListRepo_UpdateListName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *ListRepo_UpdateListName_Call) Return(_a0 error) *ListRepo_UpdateListName_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ListRepo_UpdateListName_Call) RunAndReturn(run func(string, string) error) *ListRepo_UpdateListName_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateListSharedWith provides a mock function with given fields: listId, userId
func (_m *ListRepo) UpdateListSharedWith(listId string, userId string) error {
	ret := _m.Called(listId, userId)

	if len(ret) == 0 {
		panic("no return value specified for UpdateListSharedWith")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(listId, userId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListRepo_UpdateListSharedWith_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateListSharedWith'
type ListRepo_UpdateListSharedWith_Call struct {
	*mock.Call
}

// UpdateListSharedWith is a helper method to define mock.On call
//   - listId string
//   - userId string
func (_e *ListRepo_Expecter) UpdateListSharedWith(listId interface{}, userId interface{}) *ListRepo_UpdateListSharedWith_Call {
	return &ListRepo_UpdateListSharedWith_Call{Call: _e.mock.On("UpdateListSharedWith", listId, userId)}
}

func (_c *ListRepo_UpdateListSharedWith_Call) Run(run func(listId string, userId string)) *ListRepo_UpdateListSharedWith_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *ListRepo_UpdateListSharedWith_Call) Return(_a0 error) *ListRepo_UpdateListSharedWith_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ListRepo_UpdateListSharedWith_Call) RunAndReturn(run func(string, string) error) *ListRepo_UpdateListSharedWith_Call {
	_c.Call.Return(run)
	return _c
}

// NewListRepo creates a new instance of ListRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewListRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *ListRepo {
	mock := &ListRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
