// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	entities "Todo-List/internProject/todo_app_service/internal/entities"
	context "context"

	mock "github.com/stretchr/testify/mock"

	sql_query_decorators "Todo-List/internProject/todo_app_service/internal/sql_query_decorators"
)

// ListRepo is an autogenerated mock type for the listRepo type
type ListRepo struct {
	mock.Mock
}

type ListRepo_Expecter struct {
	mock *mock.Mock
}

func (_m *ListRepo) EXPECT() *ListRepo_Expecter {
	return &ListRepo_Expecter{mock: &_m.Mock}
}

// CheckWhetherUserIsCollaborator provides a mock function with given fields: _a0, _a1, _a2
func (_m *ListRepo) CheckWhetherUserIsCollaborator(_a0 context.Context, _a1 string, _a2 string) (bool, error) {
	ret := _m.Called(_a0, _a1, _a2)

	if len(ret) == 0 {
		panic("no return value specified for CheckWhetherUserIsCollaborator")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (bool, error)); ok {
		return rf(_a0, _a1, _a2)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) bool); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListRepo_CheckWhetherUserIsCollaborator_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CheckWhetherUserIsCollaborator'
type ListRepo_CheckWhetherUserIsCollaborator_Call struct {
	*mock.Call
}

// CheckWhetherUserIsCollaborator is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 string
//   - _a2 string
func (_e *ListRepo_Expecter) CheckWhetherUserIsCollaborator(_a0 interface{}, _a1 interface{}, _a2 interface{}) *ListRepo_CheckWhetherUserIsCollaborator_Call {
	return &ListRepo_CheckWhetherUserIsCollaborator_Call{Call: _e.mock.On("CheckWhetherUserIsCollaborator", _a0, _a1, _a2)}
}

func (_c *ListRepo_CheckWhetherUserIsCollaborator_Call) Run(run func(_a0 context.Context, _a1 string, _a2 string)) *ListRepo_CheckWhetherUserIsCollaborator_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *ListRepo_CheckWhetherUserIsCollaborator_Call) Return(_a0 bool, _a1 error) *ListRepo_CheckWhetherUserIsCollaborator_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ListRepo_CheckWhetherUserIsCollaborator_Call) RunAndReturn(run func(context.Context, string, string) (bool, error)) *ListRepo_CheckWhetherUserIsCollaborator_Call {
	_c.Call.Return(run)
	return _c
}

// CreateList provides a mock function with given fields: _a0, _a1
func (_m *ListRepo) CreateList(_a0 context.Context, _a1 *entities.List) (*entities.List, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for CreateList")
	}

	var r0 *entities.List
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *entities.List) (*entities.List, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *entities.List) *entities.List); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.List)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *entities.List) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListRepo_CreateList_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateList'
type ListRepo_CreateList_Call struct {
	*mock.Call
}

// CreateList is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *entities.List
func (_e *ListRepo_Expecter) CreateList(_a0 interface{}, _a1 interface{}) *ListRepo_CreateList_Call {
	return &ListRepo_CreateList_Call{Call: _e.mock.On("CreateList", _a0, _a1)}
}

func (_c *ListRepo_CreateList_Call) Run(run func(_a0 context.Context, _a1 *entities.List)) *ListRepo_CreateList_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*entities.List))
	})
	return _c
}

func (_c *ListRepo_CreateList_Call) Return(_a0 *entities.List, _a1 error) *ListRepo_CreateList_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ListRepo_CreateList_Call) RunAndReturn(run func(context.Context, *entities.List) (*entities.List, error)) *ListRepo_CreateList_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteCollaborator provides a mock function with given fields: _a0, _a1, _a2
func (_m *ListRepo) DeleteCollaborator(_a0 context.Context, _a1 string, _a2 string) error {
	ret := _m.Called(_a0, _a1, _a2)

	if len(ret) == 0 {
		panic("no return value specified for DeleteCollaborator")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListRepo_DeleteCollaborator_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteCollaborator'
type ListRepo_DeleteCollaborator_Call struct {
	*mock.Call
}

// DeleteCollaborator is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 string
//   - _a2 string
func (_e *ListRepo_Expecter) DeleteCollaborator(_a0 interface{}, _a1 interface{}, _a2 interface{}) *ListRepo_DeleteCollaborator_Call {
	return &ListRepo_DeleteCollaborator_Call{Call: _e.mock.On("DeleteCollaborator", _a0, _a1, _a2)}
}

func (_c *ListRepo_DeleteCollaborator_Call) Run(run func(_a0 context.Context, _a1 string, _a2 string)) *ListRepo_DeleteCollaborator_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *ListRepo_DeleteCollaborator_Call) Return(_a0 error) *ListRepo_DeleteCollaborator_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ListRepo_DeleteCollaborator_Call) RunAndReturn(run func(context.Context, string, string) error) *ListRepo_DeleteCollaborator_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteList provides a mock function with given fields: _a0, _a1
func (_m *ListRepo) DeleteList(_a0 context.Context, _a1 string) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for DeleteList")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListRepo_DeleteList_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteList'
type ListRepo_DeleteList_Call struct {
	*mock.Call
}

// DeleteList is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 string
func (_e *ListRepo_Expecter) DeleteList(_a0 interface{}, _a1 interface{}) *ListRepo_DeleteList_Call {
	return &ListRepo_DeleteList_Call{Call: _e.mock.On("DeleteList", _a0, _a1)}
}

func (_c *ListRepo_DeleteList_Call) Run(run func(_a0 context.Context, _a1 string)) *ListRepo_DeleteList_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *ListRepo_DeleteList_Call) Return(_a0 error) *ListRepo_DeleteList_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ListRepo_DeleteList_Call) RunAndReturn(run func(context.Context, string) error) *ListRepo_DeleteList_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteLists provides a mock function with given fields: _a0
func (_m *ListRepo) DeleteLists(_a0 context.Context) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for DeleteLists")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListRepo_DeleteLists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteLists'
type ListRepo_DeleteLists_Call struct {
	*mock.Call
}

// DeleteLists is a helper method to define mock.On call
//   - _a0 context.Context
func (_e *ListRepo_Expecter) DeleteLists(_a0 interface{}) *ListRepo_DeleteLists_Call {
	return &ListRepo_DeleteLists_Call{Call: _e.mock.On("DeleteLists", _a0)}
}

func (_c *ListRepo_DeleteLists_Call) Run(run func(_a0 context.Context)) *ListRepo_DeleteLists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *ListRepo_DeleteLists_Call) Return(_a0 error) *ListRepo_DeleteLists_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ListRepo_DeleteLists_Call) RunAndReturn(run func(context.Context) error) *ListRepo_DeleteLists_Call {
	_c.Call.Return(run)
	return _c
}

// GetList provides a mock function with given fields: _a0, _a1
func (_m *ListRepo) GetList(_a0 context.Context, _a1 string) (*entities.List, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetList")
	}

	var r0 *entities.List
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*entities.List, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *entities.List); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.List)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListRepo_GetList_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetList'
type ListRepo_GetList_Call struct {
	*mock.Call
}

// GetList is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 string
func (_e *ListRepo_Expecter) GetList(_a0 interface{}, _a1 interface{}) *ListRepo_GetList_Call {
	return &ListRepo_GetList_Call{Call: _e.mock.On("GetList", _a0, _a1)}
}

func (_c *ListRepo_GetList_Call) Run(run func(_a0 context.Context, _a1 string)) *ListRepo_GetList_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *ListRepo_GetList_Call) Return(_a0 *entities.List, _a1 error) *ListRepo_GetList_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ListRepo_GetList_Call) RunAndReturn(run func(context.Context, string) (*entities.List, error)) *ListRepo_GetList_Call {
	_c.Call.Return(run)
	return _c
}

// GetListCollaborators provides a mock function with given fields: _a0, _a1
func (_m *ListRepo) GetListCollaborators(_a0 context.Context, _a1 sql_query_decorators.SqlQueryRetriever) ([]entities.User, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetListCollaborators")
	}

	var r0 []entities.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, sql_query_decorators.SqlQueryRetriever) ([]entities.User, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, sql_query_decorators.SqlQueryRetriever) []entities.User); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entities.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, sql_query_decorators.SqlQueryRetriever) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListRepo_GetListCollaborators_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetListCollaborators'
type ListRepo_GetListCollaborators_Call struct {
	*mock.Call
}

// GetListCollaborators is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 sql_query_decorators.SqlQueryRetriever
func (_e *ListRepo_Expecter) GetListCollaborators(_a0 interface{}, _a1 interface{}) *ListRepo_GetListCollaborators_Call {
	return &ListRepo_GetListCollaborators_Call{Call: _e.mock.On("GetListCollaborators", _a0, _a1)}
}

func (_c *ListRepo_GetListCollaborators_Call) Run(run func(_a0 context.Context, _a1 sql_query_decorators.SqlQueryRetriever)) *ListRepo_GetListCollaborators_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(sql_query_decorators.SqlQueryRetriever))
	})
	return _c
}

func (_c *ListRepo_GetListCollaborators_Call) Return(_a0 []entities.User, _a1 error) *ListRepo_GetListCollaborators_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ListRepo_GetListCollaborators_Call) RunAndReturn(run func(context.Context, sql_query_decorators.SqlQueryRetriever) ([]entities.User, error)) *ListRepo_GetListCollaborators_Call {
	_c.Call.Return(run)
	return _c
}

// GetListOwner provides a mock function with given fields: _a0, _a1
func (_m *ListRepo) GetListOwner(_a0 context.Context, _a1 string) (*entities.User, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetListOwner")
	}

	var r0 *entities.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*entities.User, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *entities.User); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListRepo_GetListOwner_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetListOwner'
type ListRepo_GetListOwner_Call struct {
	*mock.Call
}

// GetListOwner is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 string
func (_e *ListRepo_Expecter) GetListOwner(_a0 interface{}, _a1 interface{}) *ListRepo_GetListOwner_Call {
	return &ListRepo_GetListOwner_Call{Call: _e.mock.On("GetListOwner", _a0, _a1)}
}

func (_c *ListRepo_GetListOwner_Call) Run(run func(_a0 context.Context, _a1 string)) *ListRepo_GetListOwner_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *ListRepo_GetListOwner_Call) Return(_a0 *entities.User, _a1 error) *ListRepo_GetListOwner_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ListRepo_GetListOwner_Call) RunAndReturn(run func(context.Context, string) (*entities.User, error)) *ListRepo_GetListOwner_Call {
	_c.Call.Return(run)
	return _c
}

// GetLists provides a mock function with given fields: _a0, _a1
func (_m *ListRepo) GetLists(_a0 context.Context, _a1 sql_query_decorators.SqlQueryRetriever) ([]entities.List, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetLists")
	}

	var r0 []entities.List
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, sql_query_decorators.SqlQueryRetriever) ([]entities.List, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, sql_query_decorators.SqlQueryRetriever) []entities.List); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entities.List)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, sql_query_decorators.SqlQueryRetriever) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListRepo_GetLists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLists'
type ListRepo_GetLists_Call struct {
	*mock.Call
}

// GetLists is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 sql_query_decorators.SqlQueryRetriever
func (_e *ListRepo_Expecter) GetLists(_a0 interface{}, _a1 interface{}) *ListRepo_GetLists_Call {
	return &ListRepo_GetLists_Call{Call: _e.mock.On("GetLists", _a0, _a1)}
}

func (_c *ListRepo_GetLists_Call) Run(run func(_a0 context.Context, _a1 sql_query_decorators.SqlQueryRetriever)) *ListRepo_GetLists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(sql_query_decorators.SqlQueryRetriever))
	})
	return _c
}

func (_c *ListRepo_GetLists_Call) Return(_a0 []entities.List, _a1 error) *ListRepo_GetLists_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ListRepo_GetLists_Call) RunAndReturn(run func(context.Context, sql_query_decorators.SqlQueryRetriever) ([]entities.List, error)) *ListRepo_GetLists_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateList provides a mock function with given fields: _a0, _a1, _a2
func (_m *ListRepo) UpdateList(_a0 context.Context, _a1 map[string]interface{}, _a2 []string) (*entities.List, error) {
	ret := _m.Called(_a0, _a1, _a2)

	if len(ret) == 0 {
		panic("no return value specified for UpdateList")
	}

	var r0 *entities.List
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, map[string]interface{}, []string) (*entities.List, error)); ok {
		return rf(_a0, _a1, _a2)
	}
	if rf, ok := ret.Get(0).(func(context.Context, map[string]interface{}, []string) *entities.List); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.List)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, map[string]interface{}, []string) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListRepo_UpdateList_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateList'
type ListRepo_UpdateList_Call struct {
	*mock.Call
}

// UpdateList is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 map[string]interface{}
//   - _a2 []string
func (_e *ListRepo_Expecter) UpdateList(_a0 interface{}, _a1 interface{}, _a2 interface{}) *ListRepo_UpdateList_Call {
	return &ListRepo_UpdateList_Call{Call: _e.mock.On("UpdateList", _a0, _a1, _a2)}
}

func (_c *ListRepo_UpdateList_Call) Run(run func(_a0 context.Context, _a1 map[string]interface{}, _a2 []string)) *ListRepo_UpdateList_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(map[string]interface{}), args[2].([]string))
	})
	return _c
}

func (_c *ListRepo_UpdateList_Call) Return(_a0 *entities.List, _a1 error) *ListRepo_UpdateList_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ListRepo_UpdateList_Call) RunAndReturn(run func(context.Context, map[string]interface{}, []string) (*entities.List, error)) *ListRepo_UpdateList_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateListSharedWith provides a mock function with given fields: _a0, _a1, _a2
func (_m *ListRepo) UpdateListSharedWith(_a0 context.Context, _a1 string, _a2 string) error {
	ret := _m.Called(_a0, _a1, _a2)

	if len(ret) == 0 {
		panic("no return value specified for UpdateListSharedWith")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListRepo_UpdateListSharedWith_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateListSharedWith'
type ListRepo_UpdateListSharedWith_Call struct {
	*mock.Call
}

// UpdateListSharedWith is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 string
//   - _a2 string
func (_e *ListRepo_Expecter) UpdateListSharedWith(_a0 interface{}, _a1 interface{}, _a2 interface{}) *ListRepo_UpdateListSharedWith_Call {
	return &ListRepo_UpdateListSharedWith_Call{Call: _e.mock.On("UpdateListSharedWith", _a0, _a1, _a2)}
}

func (_c *ListRepo_UpdateListSharedWith_Call) Run(run func(_a0 context.Context, _a1 string, _a2 string)) *ListRepo_UpdateListSharedWith_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *ListRepo_UpdateListSharedWith_Call) Return(_a0 error) *ListRepo_UpdateListSharedWith_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ListRepo_UpdateListSharedWith_Call) RunAndReturn(run func(context.Context, string, string) error) *ListRepo_UpdateListSharedWith_Call {
	_c.Call.Return(run)
	return _c
}

// NewListRepo creates a new instance of ListRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewListRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *ListRepo {
	mock := &ListRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
