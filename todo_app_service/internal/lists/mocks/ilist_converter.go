// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	"internProject/todo_app_service/internal/entities"
	"internProject/todo_app_service/pkg/models"

	mock "github.com/stretchr/testify/mock"
)

// IListConverter is an autogenerated mock type for the IListConverter type
type IListConverter struct {
	mock.Mock
}

type IListConverter_Expecter struct {
	mock *mock.Mock
}

func (_m *IListConverter) EXPECT() *IListConverter_Expecter {
	return &IListConverter_Expecter{mock: &_m.Mock}
}

// ConvertFromDBEntityToModel provides a mock function with given fields: list
func (_m *IListConverter) ConvertFromDBEntityToModel(list *entities.List) *models.List {
	ret := _m.Called(list)

	if len(ret) == 0 {
		panic("no return value specified for ConvertFromDBEntityToModel")
	}

	var r0 *models.List
	if rf, ok := ret.Get(0).(func(*entities.List) *models.List); ok {
		r0 = rf(list)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.List)
		}
	}

	return r0
}

// IListConverter_ConvertFromDBEntityToModel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ConvertFromDBEntityToModel'
type IListConverter_ConvertFromDBEntityToModel_Call struct {
	*mock.Call
}

// ConvertFromDBEntityToModel is a helper method to define mock.On call
//   - list *entities.List
func (_e *IListConverter_Expecter) ConvertFromDBEntityToModel(list interface{}) *IListConverter_ConvertFromDBEntityToModel_Call {
	return &IListConverter_ConvertFromDBEntityToModel_Call{Call: _e.mock.On("ConvertFromDBEntityToModel", list)}
}

func (_c *IListConverter_ConvertFromDBEntityToModel_Call) Run(run func(list *entities.List)) *IListConverter_ConvertFromDBEntityToModel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*entities.List))
	})
	return _c
}

func (_c *IListConverter_ConvertFromDBEntityToModel_Call) Return(_a0 *models.List) *IListConverter_ConvertFromDBEntityToModel_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IListConverter_ConvertFromDBEntityToModel_Call) RunAndReturn(run func(*entities.List) *models.List) *IListConverter_ConvertFromDBEntityToModel_Call {
	_c.Call.Return(run)
	return _c
}

// ConvertFromModelToDBEntity provides a mock function with given fields: list
func (_m *IListConverter) ConvertFromModelToDBEntity(list *models.List) *entities.List {
	ret := _m.Called(list)

	if len(ret) == 0 {
		panic("no return value specified for ConvertFromModelToDBEntity")
	}

	var r0 *entities.List
	if rf, ok := ret.Get(0).(func(*models.List) *entities.List); ok {
		r0 = rf(list)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.List)
		}
	}

	return r0
}

// IListConverter_ConvertFromModelToDBEntity_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ConvertFromModelToDBEntity'
type IListConverter_ConvertFromModelToDBEntity_Call struct {
	*mock.Call
}

// ConvertFromModelToDBEntity is a helper method to define mock.On call
//   - list *models.List
func (_e *IListConverter_Expecter) ConvertFromModelToDBEntity(list interface{}) *IListConverter_ConvertFromModelToDBEntity_Call {
	return &IListConverter_ConvertFromModelToDBEntity_Call{Call: _e.mock.On("ConvertFromModelToDBEntity", list)}
}

func (_c *IListConverter_ConvertFromModelToDBEntity_Call) Run(run func(list *models.List)) *IListConverter_ConvertFromModelToDBEntity_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*models.List))
	})
	return _c
}

func (_c *IListConverter_ConvertFromModelToDBEntity_Call) Return(_a0 *entities.List) *IListConverter_ConvertFromModelToDBEntity_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IListConverter_ConvertFromModelToDBEntity_Call) RunAndReturn(run func(*models.List) *entities.List) *IListConverter_ConvertFromModelToDBEntity_Call {
	_c.Call.Return(run)
	return _c
}

// NewIListConverter creates a new instance of IListConverter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIListConverter(t interface {
	mock.TestingT
	Cleanup(func())
}) *IListConverter {
	mock := &IListConverter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
