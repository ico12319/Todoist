// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	entities "Todo-List/internProject/todo_app_service/internal/entities"
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// RefreshRepository is an autogenerated mock type for the refreshRepository type
type RefreshRepository struct {
	mock.Mock
}

type RefreshRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *RefreshRepository) EXPECT() *RefreshRepository_Expecter {
	return &RefreshRepository_Expecter{mock: &_m.Mock}
}

// CreateRefreshToken provides a mock function with given fields: _a0, _a1
func (_m *RefreshRepository) CreateRefreshToken(_a0 context.Context, _a1 *entities.Refresh) (*entities.Refresh, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for CreateRefreshToken")
	}

	var r0 *entities.Refresh
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *entities.Refresh) (*entities.Refresh, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *entities.Refresh) *entities.Refresh); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Refresh)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *entities.Refresh) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RefreshRepository_CreateRefreshToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateRefreshToken'
type RefreshRepository_CreateRefreshToken_Call struct {
	*mock.Call
}

// CreateRefreshToken is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *entities.Refresh
func (_e *RefreshRepository_Expecter) CreateRefreshToken(_a0 interface{}, _a1 interface{}) *RefreshRepository_CreateRefreshToken_Call {
	return &RefreshRepository_CreateRefreshToken_Call{Call: _e.mock.On("CreateRefreshToken", _a0, _a1)}
}

func (_c *RefreshRepository_CreateRefreshToken_Call) Run(run func(_a0 context.Context, _a1 *entities.Refresh)) *RefreshRepository_CreateRefreshToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*entities.Refresh))
	})
	return _c
}

func (_c *RefreshRepository_CreateRefreshToken_Call) Return(_a0 *entities.Refresh, _a1 error) *RefreshRepository_CreateRefreshToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RefreshRepository_CreateRefreshToken_Call) RunAndReturn(run func(context.Context, *entities.Refresh) (*entities.Refresh, error)) *RefreshRepository_CreateRefreshToken_Call {
	_c.Call.Return(run)
	return _c
}

// GetTokenOwner provides a mock function with given fields: _a0, _a1
func (_m *RefreshRepository) GetTokenOwner(_a0 context.Context, _a1 string) (*entities.User, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetTokenOwner")
	}

	var r0 *entities.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*entities.User, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *entities.User); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RefreshRepository_GetTokenOwner_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTokenOwner'
type RefreshRepository_GetTokenOwner_Call struct {
	*mock.Call
}

// GetTokenOwner is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 string
func (_e *RefreshRepository_Expecter) GetTokenOwner(_a0 interface{}, _a1 interface{}) *RefreshRepository_GetTokenOwner_Call {
	return &RefreshRepository_GetTokenOwner_Call{Call: _e.mock.On("GetTokenOwner", _a0, _a1)}
}

func (_c *RefreshRepository_GetTokenOwner_Call) Run(run func(_a0 context.Context, _a1 string)) *RefreshRepository_GetTokenOwner_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *RefreshRepository_GetTokenOwner_Call) Return(_a0 *entities.User, _a1 error) *RefreshRepository_GetTokenOwner_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RefreshRepository_GetTokenOwner_Call) RunAndReturn(run func(context.Context, string) (*entities.User, error)) *RefreshRepository_GetTokenOwner_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateRefreshToken provides a mock function with given fields: _a0, _a1, _a2
func (_m *RefreshRepository) UpdateRefreshToken(_a0 context.Context, _a1 string, _a2 string) (*entities.Refresh, error) {
	ret := _m.Called(_a0, _a1, _a2)

	if len(ret) == 0 {
		panic("no return value specified for UpdateRefreshToken")
	}

	var r0 *entities.Refresh
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*entities.Refresh, error)); ok {
		return rf(_a0, _a1, _a2)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *entities.Refresh); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Refresh)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RefreshRepository_UpdateRefreshToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateRefreshToken'
type RefreshRepository_UpdateRefreshToken_Call struct {
	*mock.Call
}

// UpdateRefreshToken is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 string
//   - _a2 string
func (_e *RefreshRepository_Expecter) UpdateRefreshToken(_a0 interface{}, _a1 interface{}, _a2 interface{}) *RefreshRepository_UpdateRefreshToken_Call {
	return &RefreshRepository_UpdateRefreshToken_Call{Call: _e.mock.On("UpdateRefreshToken", _a0, _a1, _a2)}
}

func (_c *RefreshRepository_UpdateRefreshToken_Call) Run(run func(_a0 context.Context, _a1 string, _a2 string)) *RefreshRepository_UpdateRefreshToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *RefreshRepository_UpdateRefreshToken_Call) Return(_a0 *entities.Refresh, _a1 error) *RefreshRepository_UpdateRefreshToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RefreshRepository_UpdateRefreshToken_Call) RunAndReturn(run func(context.Context, string, string) (*entities.Refresh, error)) *RefreshRepository_UpdateRefreshToken_Call {
	_c.Call.Return(run)
	return _c
}

// NewRefreshRepository creates a new instance of RefreshRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRefreshRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *RefreshRepository {
	mock := &RefreshRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
