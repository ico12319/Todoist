// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	entities "Todo-List/internProject/todo_app_service/internal/entities"

	mock "github.com/stretchr/testify/mock"

	models "Todo-List/internProject/todo_app_service/pkg/models"
)

// Converter is an autogenerated mock type for the converter type
type Converter struct {
	mock.Mock
}

type Converter_Expecter struct {
	mock *mock.Mock
}

func (_m *Converter) EXPECT() *Converter_Expecter {
	return &Converter_Expecter{mock: &_m.Mock}
}

// ToEntity provides a mock function with given fields: _a0
func (_m *Converter) ToEntity(_a0 *models.Refresh) *entities.Refresh {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for ToEntity")
	}

	var r0 *entities.Refresh
	if rf, ok := ret.Get(0).(func(*models.Refresh) *entities.Refresh); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Refresh)
		}
	}

	return r0
}

// Converter_ToEntity_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ToEntity'
type Converter_ToEntity_Call struct {
	*mock.Call
}

// ToEntity is a helper method to define mock.On call
//   - _a0 *models.Refresh
func (_e *Converter_Expecter) ToEntity(_a0 interface{}) *Converter_ToEntity_Call {
	return &Converter_ToEntity_Call{Call: _e.mock.On("ToEntity", _a0)}
}

func (_c *Converter_ToEntity_Call) Run(run func(_a0 *models.Refresh)) *Converter_ToEntity_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*models.Refresh))
	})
	return _c
}

func (_c *Converter_ToEntity_Call) Return(_a0 *entities.Refresh) *Converter_ToEntity_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Converter_ToEntity_Call) RunAndReturn(run func(*models.Refresh) *entities.Refresh) *Converter_ToEntity_Call {
	_c.Call.Return(run)
	return _c
}

// ToModel provides a mock function with given fields: _a0
func (_m *Converter) ToModel(_a0 *entities.Refresh) *models.Refresh {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for ToModel")
	}

	var r0 *models.Refresh
	if rf, ok := ret.Get(0).(func(*entities.Refresh) *models.Refresh); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Refresh)
		}
	}

	return r0
}

// Converter_ToModel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ToModel'
type Converter_ToModel_Call struct {
	*mock.Call
}

// ToModel is a helper method to define mock.On call
//   - _a0 *entities.Refresh
func (_e *Converter_Expecter) ToModel(_a0 interface{}) *Converter_ToModel_Call {
	return &Converter_ToModel_Call{Call: _e.mock.On("ToModel", _a0)}
}

func (_c *Converter_ToModel_Call) Run(run func(_a0 *entities.Refresh)) *Converter_ToModel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*entities.Refresh))
	})
	return _c
}

func (_c *Converter_ToModel_Call) Return(_a0 *models.Refresh) *Converter_ToModel_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Converter_ToModel_Call) RunAndReturn(run func(*entities.Refresh) *models.Refresh) *Converter_ToModel_Call {
	_c.Call.Return(run)
	return _c
}

// NewConverter creates a new instance of Converter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewConverter(t interface {
	mock.TestingT
	Cleanup(func())
}) *Converter {
	mock := &Converter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
