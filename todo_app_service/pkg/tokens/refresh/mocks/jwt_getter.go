// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	jwt "github.com/golang-jwt/jwt/v5"
	mock "github.com/stretchr/testify/mock"
)

// JwtGetter is an autogenerated mock type for the jwtGetter type
type JwtGetter struct {
	mock.Mock
}

type JwtGetter_Expecter struct {
	mock *mock.Mock
}

func (_m *JwtGetter) EXPECT() *JwtGetter_Expecter {
	return &JwtGetter_Expecter{mock: &_m.Mock}
}

// GetJWTWithClaims provides a mock function with given fields: method, claims
func (_m *JwtGetter) GetJWTWithClaims(method jwt.SigningMethod, claims jwt.Claims) *jwt.Token {
	ret := _m.Called(method, claims)

	if len(ret) == 0 {
		panic("no return value specified for GetJWTWithClaims")
	}

	var r0 *jwt.Token
	if rf, ok := ret.Get(0).(func(jwt.SigningMethod, jwt.Claims) *jwt.Token); ok {
		r0 = rf(method, claims)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*jwt.Token)
		}
	}

	return r0
}

// JwtGetter_GetJWTWithClaims_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetJWTWithClaims'
type JwtGetter_GetJWTWithClaims_Call struct {
	*mock.Call
}

// GetJWTWithClaims is a helper method to define mock.On call
//   - method jwt.SigningMethod
//   - claims jwt.Claims
func (_e *JwtGetter_Expecter) GetJWTWithClaims(method interface{}, claims interface{}) *JwtGetter_GetJWTWithClaims_Call {
	return &JwtGetter_GetJWTWithClaims_Call{Call: _e.mock.On("GetJWTWithClaims", method, claims)}
}

func (_c *JwtGetter_GetJWTWithClaims_Call) Run(run func(method jwt.SigningMethod, claims jwt.Claims)) *JwtGetter_GetJWTWithClaims_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(jwt.SigningMethod), args[1].(jwt.Claims))
	})
	return _c
}

func (_c *JwtGetter_GetJWTWithClaims_Call) Return(_a0 *jwt.Token) *JwtGetter_GetJWTWithClaims_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *JwtGetter_GetJWTWithClaims_Call) RunAndReturn(run func(jwt.SigningMethod, jwt.Claims) *jwt.Token) *JwtGetter_GetJWTWithClaims_Call {
	_c.Call.Return(run)
	return _c
}

// GetSignedJWT provides a mock function with given fields: _a0, key
func (_m *JwtGetter) GetSignedJWT(_a0 *jwt.Token, key interface{}) (string, error) {
	ret := _m.Called(_a0, key)

	if len(ret) == 0 {
		panic("no return value specified for GetSignedJWT")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(*jwt.Token, interface{}) (string, error)); ok {
		return rf(_a0, key)
	}
	if rf, ok := ret.Get(0).(func(*jwt.Token, interface{}) string); ok {
		r0 = rf(_a0, key)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(*jwt.Token, interface{}) error); ok {
		r1 = rf(_a0, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// JwtGetter_GetSignedJWT_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSignedJWT'
type JwtGetter_GetSignedJWT_Call struct {
	*mock.Call
}

// GetSignedJWT is a helper method to define mock.On call
//   - _a0 *jwt.Token
//   - key interface{}
func (_e *JwtGetter_Expecter) GetSignedJWT(_a0 interface{}, key interface{}) *JwtGetter_GetSignedJWT_Call {
	return &JwtGetter_GetSignedJWT_Call{Call: _e.mock.On("GetSignedJWT", _a0, key)}
}

func (_c *JwtGetter_GetSignedJWT_Call) Run(run func(_a0 *jwt.Token, key interface{})) *JwtGetter_GetSignedJWT_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*jwt.Token), args[1].(interface{}))
	})
	return _c
}

func (_c *JwtGetter_GetSignedJWT_Call) Return(_a0 string, _a1 error) *JwtGetter_GetSignedJWT_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *JwtGetter_GetSignedJWT_Call) RunAndReturn(run func(*jwt.Token, interface{}) (string, error)) *JwtGetter_GetSignedJWT_Call {
	_c.Call.Return(run)
	return _c
}

// NewJwtGetter creates a new instance of JwtGetter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewJwtGetter(t interface {
	mock.TestingT
	Cleanup(func())
}) *JwtGetter {
	mock := &JwtGetter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
