// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	jwt "github.com/golang-jwt/jwt/v5"
	mock "github.com/stretchr/testify/mock"

	tokens "Todo-List/internProject/todo_app_service/pkg/tokens"
)

// Parser is an autogenerated mock type for the parser type
type Parser struct {
	mock.Mock
}

type Parser_Expecter struct {
	mock *mock.Mock
}

func (_m *Parser) EXPECT() *Parser_Expecter {
	return &Parser_Expecter{mock: &_m.Mock}
}

// ParseWithClaims provides a mock function with given fields: _a0, _a1
func (_m *Parser) ParseWithClaims(_a0 string, _a1 *tokens.Claims) (*jwt.Token, *tokens.Claims, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for ParseWithClaims")
	}

	var r0 *jwt.Token
	var r1 *tokens.Claims
	var r2 error
	if rf, ok := ret.Get(0).(func(string, *tokens.Claims) (*jwt.Token, *tokens.Claims, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(string, *tokens.Claims) *jwt.Token); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*jwt.Token)
		}
	}

	if rf, ok := ret.Get(1).(func(string, *tokens.Claims) *tokens.Claims); ok {
		r1 = rf(_a0, _a1)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*tokens.Claims)
		}
	}

	if rf, ok := ret.Get(2).(func(string, *tokens.Claims) error); ok {
		r2 = rf(_a0, _a1)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Parser_ParseWithClaims_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ParseWithClaims'
type Parser_ParseWithClaims_Call struct {
	*mock.Call
}

// ParseWithClaims is a helper method to define mock.On call
//   - _a0 string
//   - _a1 *tokens.Claims
func (_e *Parser_Expecter) ParseWithClaims(_a0 interface{}, _a1 interface{}) *Parser_ParseWithClaims_Call {
	return &Parser_ParseWithClaims_Call{Call: _e.mock.On("ParseWithClaims", _a0, _a1)}
}

func (_c *Parser_ParseWithClaims_Call) Run(run func(_a0 string, _a1 *tokens.Claims)) *Parser_ParseWithClaims_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(*tokens.Claims))
	})
	return _c
}

func (_c *Parser_ParseWithClaims_Call) Return(_a0 *jwt.Token, _a1 *tokens.Claims, _a2 error) *Parser_ParseWithClaims_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *Parser_ParseWithClaims_Call) RunAndReturn(run func(string, *tokens.Claims) (*jwt.Token, *tokens.Claims, error)) *Parser_ParseWithClaims_Call {
	_c.Call.Return(run)
	return _c
}

// NewParser creates a new instance of Parser. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewParser(t interface {
	mock.TestingT
	Cleanup(func())
}) *Parser {
	mock := &Parser{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
