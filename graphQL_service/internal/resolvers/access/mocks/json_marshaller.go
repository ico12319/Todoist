// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// JsonMarshaller is an autogenerated mock type for the JsonMarshaller type
type JsonMarshaller struct {
	mock.Mock
}

type JsonMarshaller_Expecter struct {
	mock *mock.Mock
}

func (_m *JsonMarshaller) EXPECT() *JsonMarshaller_Expecter {
	return &JsonMarshaller_Expecter{mock: &_m.Mock}
}

// Marshal provides a mock function with given fields: v
func (_m *JsonMarshaller) Marshal(v interface{}) ([]byte, error) {
	ret := _m.Called(v)

	if len(ret) == 0 {
		panic("no return value specified for Marshal")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(interface{}) ([]byte, error)); ok {
		return rf(v)
	}
	if rf, ok := ret.Get(0).(func(interface{}) []byte); ok {
		r0 = rf(v)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}) error); ok {
		r1 = rf(v)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// JsonMarshaller_Marshal_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Marshal'
type JsonMarshaller_Marshal_Call struct {
	*mock.Call
}

// Marshal is a helper method to define mock.On call
//   - v interface{}
func (_e *JsonMarshaller_Expecter) Marshal(v interface{}) *JsonMarshaller_Marshal_Call {
	return &JsonMarshaller_Marshal_Call{Call: _e.mock.On("Marshal", v)}
}

func (_c *JsonMarshaller_Marshal_Call) Run(run func(v interface{})) *JsonMarshaller_Marshal_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(interface{}))
	})
	return _c
}

func (_c *JsonMarshaller_Marshal_Call) Return(_a0 []byte, _a1 error) *JsonMarshaller_Marshal_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *JsonMarshaller_Marshal_Call) RunAndReturn(run func(interface{}) ([]byte, error)) *JsonMarshaller_Marshal_Call {
	_c.Call.Return(run)
	return _c
}

// NewJsonMarshaller creates a new instance of JsonMarshaller. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewJsonMarshaller(t interface {
	mock.TestingT
	Cleanup(func())
}) *JsonMarshaller {
	mock := &JsonMarshaller{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
