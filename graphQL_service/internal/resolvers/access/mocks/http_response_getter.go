// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"
	http "net/http"

	io "io"

	mock "github.com/stretchr/testify/mock"
)

// HttpResponseGetter is an autogenerated mock type for the httpResponseGetter type
type HttpResponseGetter struct {
	mock.Mock
}

type HttpResponseGetter_Expecter struct {
	mock *mock.Mock
}

func (_m *HttpResponseGetter) EXPECT() *HttpResponseGetter_Expecter {
	return &HttpResponseGetter_Expecter{mock: &_m.Mock}
}

// GetHttpResponse provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *HttpResponseGetter) GetHttpResponse(_a0 context.Context, _a1 string, _a2 string, _a3 io.Reader) (*http.Response, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3)

	if len(ret) == 0 {
		panic("no return value specified for GetHttpResponse")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, io.Reader) (*http.Response, error)); ok {
		return rf(_a0, _a1, _a2, _a3)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, io.Reader) *http.Response); ok {
		r0 = rf(_a0, _a1, _a2, _a3)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, io.Reader) error); ok {
		r1 = rf(_a0, _a1, _a2, _a3)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HttpResponseGetter_GetHttpResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetHttpResponse'
type HttpResponseGetter_GetHttpResponse_Call struct {
	*mock.Call
}

// GetHttpResponse is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 string
//   - _a2 string
//   - _a3 io.Reader
func (_e *HttpResponseGetter_Expecter) GetHttpResponse(_a0 interface{}, _a1 interface{}, _a2 interface{}, _a3 interface{}) *HttpResponseGetter_GetHttpResponse_Call {
	return &HttpResponseGetter_GetHttpResponse_Call{Call: _e.mock.On("GetHttpResponse", _a0, _a1, _a2, _a3)}
}

func (_c *HttpResponseGetter_GetHttpResponse_Call) Run(run func(_a0 context.Context, _a1 string, _a2 string, _a3 io.Reader)) *HttpResponseGetter_GetHttpResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(io.Reader))
	})
	return _c
}

func (_c *HttpResponseGetter_GetHttpResponse_Call) Return(_a0 *http.Response, _a1 error) *HttpResponseGetter_GetHttpResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *HttpResponseGetter_GetHttpResponse_Call) RunAndReturn(run func(context.Context, string, string, io.Reader) (*http.Response, error)) *HttpResponseGetter_GetHttpResponse_Call {
	_c.Call.Return(run)
	return _c
}

// NewHttpResponseGetter creates a new instance of HttpResponseGetter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewHttpResponseGetter(t interface {
	mock.TestingT
	Cleanup(func())
}) *HttpResponseGetter {
	mock := &HttpResponseGetter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
