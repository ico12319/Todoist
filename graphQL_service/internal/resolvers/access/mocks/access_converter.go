// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	"Todo-List/internProject/graphQL_service/graph/model"
	handler_models "Todo-List/internProject/todo_app_service/pkg/handler_models"

	mock "github.com/stretchr/testify/mock"

	models "Todo-List/internProject/todo_app_service/pkg/models"
)

// AccessConverter is an autogenerated mock type for the AccessConverter type
type AccessConverter struct {
	mock.Mock
}

type AccessConverter_Expecter struct {
	mock *mock.Mock
}

func (_m *AccessConverter) EXPECT() *AccessConverter_Expecter {
	return &AccessConverter_Expecter{mock: &_m.Mock}
}

// ToGQL provides a mock function with given fields: refresh
func (_m *AccessConverter) ToGQL(refresh *models.CallbackResponse) *model.Access {
	ret := _m.Called(refresh)

	if len(ret) == 0 {
		panic("no return value specified for ToGQL")
	}

	var r0 *model.Access
	if rf, ok := ret.Get(0).(func(*models.CallbackResponse) *model.Access); ok {
		r0 = rf(refresh)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Access)
		}
	}

	return r0
}

// AccessConverter_ToGQL_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ToGQL'
type AccessConverter_ToGQL_Call struct {
	*mock.Call
}

// ToGQL is a helper method to define mock.On call
//   - refresh *models.CallbackResponse
func (_e *AccessConverter_Expecter) ToGQL(refresh interface{}) *AccessConverter_ToGQL_Call {
	return &AccessConverter_ToGQL_Call{Call: _e.mock.On("ToGQL", refresh)}
}

func (_c *AccessConverter_ToGQL_Call) Run(run func(refresh *models.CallbackResponse)) *AccessConverter_ToGQL_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*models.CallbackResponse))
	})
	return _c
}

func (_c *AccessConverter_ToGQL_Call) Return(_a0 *model.Access) *AccessConverter_ToGQL_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AccessConverter_ToGQL_Call) RunAndReturn(run func(*models.CallbackResponse) *model.Access) *AccessConverter_ToGQL_Call {
	_c.Call.Return(run)
	return _c
}

// ToHandlerModelRefresh provides a mock function with given fields: refreshInput
func (_m *AccessConverter) ToHandlerModelRefresh(refreshInput *model.RefreshTokenInput) *handler_models.Refresh {
	ret := _m.Called(refreshInput)

	if len(ret) == 0 {
		panic("no return value specified for ToHandlerModelRefresh")
	}

	var r0 *handler_models.Refresh
	if rf, ok := ret.Get(0).(func(*model.RefreshTokenInput) *handler_models.Refresh); ok {
		r0 = rf(refreshInput)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*handler_models.Refresh)
		}
	}

	return r0
}

// AccessConverter_ToHandlerModelRefresh_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ToHandlerModelRefresh'
type AccessConverter_ToHandlerModelRefresh_Call struct {
	*mock.Call
}

// ToHandlerModelRefresh is a helper method to define mock.On call
//   - refreshInput *model.RefreshTokenInput
func (_e *AccessConverter_Expecter) ToHandlerModelRefresh(refreshInput interface{}) *AccessConverter_ToHandlerModelRefresh_Call {
	return &AccessConverter_ToHandlerModelRefresh_Call{Call: _e.mock.On("ToHandlerModelRefresh", refreshInput)}
}

func (_c *AccessConverter_ToHandlerModelRefresh_Call) Run(run func(refreshInput *model.RefreshTokenInput)) *AccessConverter_ToHandlerModelRefresh_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*model.RefreshTokenInput))
	})
	return _c
}

func (_c *AccessConverter_ToHandlerModelRefresh_Call) Return(_a0 *handler_models.Refresh) *AccessConverter_ToHandlerModelRefresh_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AccessConverter_ToHandlerModelRefresh_Call) RunAndReturn(run func(*model.RefreshTokenInput) *handler_models.Refresh) *AccessConverter_ToHandlerModelRefresh_Call {
	_c.Call.Return(run)
	return _c
}

// NewAccessConverter creates a new instance of AccessConverter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAccessConverter(t interface {
	mock.TestingT
	Cleanup(func())
}) *AccessConverter {
	mock := &AccessConverter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
