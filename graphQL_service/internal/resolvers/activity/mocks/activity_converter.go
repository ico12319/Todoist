// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	model "Todo-List/internProject/graphQL_service/graph/model"
	models "Todo-List/internProject/todo_app_service/pkg/models"

	mock "github.com/stretchr/testify/mock"
)

// ActivityConverter is an autogenerated mock type for the activityConverter type
type ActivityConverter struct {
	mock.Mock
}

type ActivityConverter_Expecter struct {
	mock *mock.Mock
}

func (_m *ActivityConverter) EXPECT() *ActivityConverter_Expecter {
	return &ActivityConverter_Expecter{mock: &_m.Mock}
}

// ToGQL provides a mock function with given fields: _a0
func (_m *ActivityConverter) ToGQL(_a0 *models.RandomActivity) *model.RandomActivity {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for ToGQL")
	}

	var r0 *model.RandomActivity
	if rf, ok := ret.Get(0).(func(*models.RandomActivity) *model.RandomActivity); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.RandomActivity)
		}
	}

	return r0
}

// ActivityConverter_ToGQL_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ToGQL'
type ActivityConverter_ToGQL_Call struct {
	*mock.Call
}

// ToGQL is a helper method to define mock.On call
//   - _a0 *models.RandomActivity
func (_e *ActivityConverter_Expecter) ToGQL(_a0 interface{}) *ActivityConverter_ToGQL_Call {
	return &ActivityConverter_ToGQL_Call{Call: _e.mock.On("ToGQL", _a0)}
}

func (_c *ActivityConverter_ToGQL_Call) Run(run func(_a0 *models.RandomActivity)) *ActivityConverter_ToGQL_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*models.RandomActivity))
	})
	return _c
}

func (_c *ActivityConverter_ToGQL_Call) Return(_a0 *model.RandomActivity) *ActivityConverter_ToGQL_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ActivityConverter_ToGQL_Call) RunAndReturn(run func(*models.RandomActivity) *model.RandomActivity) *ActivityConverter_ToGQL_Call {
	_c.Call.Return(run)
	return _c
}

// NewActivityConverter creates a new instance of ActivityConverter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewActivityConverter(t interface {
	mock.TestingT
	Cleanup(func())
}) *ActivityConverter {
	mock := &ActivityConverter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
