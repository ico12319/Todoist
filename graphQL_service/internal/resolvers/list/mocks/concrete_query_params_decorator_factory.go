// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	"Todo-List/internProject/graphQL_service/internal/url_decorators"
	"Todo-List/internProject/graphQL_service/internal/url_decorators/url_filters"
	context "context"
	mock "github.com/stretchr/testify/mock"
)

// concreteQueryParamsDecoratorFactory is an autogenerated mock type for the concreteQueryParamsDecoratorFactory type
type concreteQueryParamsDecoratorFactory struct {
	mock.Mock
}

type concreteQueryParamsDecoratorFactory_Expecter struct {
	mock *mock.Mock
}

func (_m *concreteQueryParamsDecoratorFactory) EXPECT() *concreteQueryParamsDecoratorFactory_Expecter {
	return &concreteQueryParamsDecoratorFactory_Expecter{mock: &_m.Mock}
}

// CreateTodoUrlDecorator provides a mock function with given fields: ctx, initialUrl, todoFilters
func (_m *concreteQueryParamsDecoratorFactory) CreateTodoUrlDecorator(ctx context.Context, initialUrl string, todoFilters *url_filters.TodoFilters) (url_decorators.QueryParamsRetrievers, error) {
	ret := _m.Called(ctx, initialUrl, todoFilters)

	if len(ret) == 0 {
		panic("no return value specified for CreateTodoUrlDecorator")
	}

	var r0 url_decorators.QueryParamsRetrievers
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *url_filters.TodoFilters) (url_decorators.QueryParamsRetrievers, error)); ok {
		return rf(ctx, initialUrl, todoFilters)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *url_filters.TodoFilters) url_decorators.QueryParamsRetrievers); ok {
		r0 = rf(ctx, initialUrl, todoFilters)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(url_decorators.QueryParamsRetrievers)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *url_filters.TodoFilters) error); ok {
		r1 = rf(ctx, initialUrl, todoFilters)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// concreteQueryParamsDecoratorFactory_CreateTodoUrlDecorator_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateTodoUrlDecorator'
type concreteQueryParamsDecoratorFactory_CreateTodoUrlDecorator_Call struct {
	*mock.Call
}

// CreateTodoUrlDecorator is a helper method to define mock.On call
//   - ctx context.Context
//   - initialUrl string
//   - todoFilters *url_filters.TodoFilters
func (_e *concreteQueryParamsDecoratorFactory_Expecter) CreateTodoUrlDecorator(ctx interface{}, initialUrl interface{}, todoFilters interface{}) *concreteQueryParamsDecoratorFactory_CreateTodoUrlDecorator_Call {
	return &concreteQueryParamsDecoratorFactory_CreateTodoUrlDecorator_Call{Call: _e.mock.On("CreateTodoUrlDecorator", ctx, initialUrl, todoFilters)}
}

func (_c *concreteQueryParamsDecoratorFactory_CreateTodoUrlDecorator_Call) Run(run func(ctx context.Context, initialUrl string, todoFilters *url_filters.TodoFilters)) *concreteQueryParamsDecoratorFactory_CreateTodoUrlDecorator_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*url_filters.TodoFilters))
	})
	return _c
}

func (_c *concreteQueryParamsDecoratorFactory_CreateTodoUrlDecorator_Call) Return(_a0 url_decorators.QueryParamsRetrievers, _a1 error) *concreteQueryParamsDecoratorFactory_CreateTodoUrlDecorator_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *concreteQueryParamsDecoratorFactory_CreateTodoUrlDecorator_Call) RunAndReturn(run func(context.Context, string, *url_filters.TodoFilters) (url_decorators.QueryParamsRetrievers, error)) *concreteQueryParamsDecoratorFactory_CreateTodoUrlDecorator_Call {
	_c.Call.Return(run)
	return _c
}

// newConcreteQueryParamsDecoratorFactory creates a new instance of concreteQueryParamsDecoratorFactory. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newConcreteQueryParamsDecoratorFactory(t interface {
	mock.TestingT
	Cleanup(func())
}) *concreteQueryParamsDecoratorFactory {
	mock := &concreteQueryParamsDecoratorFactory{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
