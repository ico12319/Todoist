// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	"Todo-List/internProject/graphQL_service/internal/url_decorators"
	"Todo-List/internProject/graphQL_service/internal/url_decorators/url_filters"
	context "context"
	mock "github.com/stretchr/testify/mock"
)

// commonQueryParamsDecoratorFactory is an autogenerated mock type for the commonQueryParamsDecoratorFactory type
type commonQueryParamsDecoratorFactory struct {
	mock.Mock
}

type commonQueryParamsDecoratorFactory_Expecter struct {
	mock *mock.Mock
}

func (_m *commonQueryParamsDecoratorFactory) EXPECT() *commonQueryParamsDecoratorFactory_Expecter {
	return &commonQueryParamsDecoratorFactory_Expecter{mock: &_m.Mock}
}

// CreateCommonUrlDecorator provides a mock function with given fields: ctx, initialUrl, baseFilters
func (_m *commonQueryParamsDecoratorFactory) CreateCommonUrlDecorator(ctx context.Context, initialUrl string, baseFilters *url_filters.BaseFilters) (url_decorators.QueryParamsRetrievers, error) {
	ret := _m.Called(ctx, initialUrl, baseFilters)

	if len(ret) == 0 {
		panic("no return value specified for CreateCommonUrlDecorator")
	}

	var r0 url_decorators.QueryParamsRetrievers
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *url_filters.BaseFilters) (url_decorators.QueryParamsRetrievers, error)); ok {
		return rf(ctx, initialUrl, baseFilters)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *url_filters.BaseFilters) url_decorators.QueryParamsRetrievers); ok {
		r0 = rf(ctx, initialUrl, baseFilters)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(url_decorators.QueryParamsRetrievers)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *url_filters.BaseFilters) error); ok {
		r1 = rf(ctx, initialUrl, baseFilters)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// commonQueryParamsDecoratorFactory_CreateCommonUrlDecorator_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateCommonUrlDecorator'
type commonQueryParamsDecoratorFactory_CreateCommonUrlDecorator_Call struct {
	*mock.Call
}

// CreateCommonUrlDecorator is a helper method to define mock.On call
//   - ctx context.Context
//   - initialUrl string
//   - baseFilters *url_filters.BaseFilters
func (_e *commonQueryParamsDecoratorFactory_Expecter) CreateCommonUrlDecorator(ctx interface{}, initialUrl interface{}, baseFilters interface{}) *commonQueryParamsDecoratorFactory_CreateCommonUrlDecorator_Call {
	return &commonQueryParamsDecoratorFactory_CreateCommonUrlDecorator_Call{Call: _e.mock.On("CreateCommonUrlDecorator", ctx, initialUrl, baseFilters)}
}

func (_c *commonQueryParamsDecoratorFactory_CreateCommonUrlDecorator_Call) Run(run func(ctx context.Context, initialUrl string, baseFilters *url_filters.BaseFilters)) *commonQueryParamsDecoratorFactory_CreateCommonUrlDecorator_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*url_filters.BaseFilters))
	})
	return _c
}

func (_c *commonQueryParamsDecoratorFactory_CreateCommonUrlDecorator_Call) Return(_a0 url_decorators.QueryParamsRetrievers, _a1 error) *commonQueryParamsDecoratorFactory_CreateCommonUrlDecorator_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *commonQueryParamsDecoratorFactory_CreateCommonUrlDecorator_Call) RunAndReturn(run func(context.Context, string, *url_filters.BaseFilters) (url_decorators.QueryParamsRetrievers, error)) *commonQueryParamsDecoratorFactory_CreateCommonUrlDecorator_Call {
	_c.Call.Return(run)
	return _c
}

// newCommonQueryParamsDecoratorFactory creates a new instance of commonQueryParamsDecoratorFactory. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newCommonQueryParamsDecoratorFactory(t interface {
	mock.TestingT
	Cleanup(func())
}) *commonQueryParamsDecoratorFactory {
	mock := &commonQueryParamsDecoratorFactory{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
