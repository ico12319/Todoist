// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	"Todo-List/internProject/graphQL_service/graph/model"
	models "Todo-List/internProject/todo_app_service/pkg/models"

	mock "github.com/stretchr/testify/mock"
)

// UserConverter is an autogenerated mock type for the userConverter type
type UserConverter struct {
	mock.Mock
}

type UserConverter_Expecter struct {
	mock *mock.Mock
}

func (_m *UserConverter) EXPECT() *UserConverter_Expecter {
	return &UserConverter_Expecter{mock: &_m.Mock}
}

// FromGQLToDeleteUserPayload provides a mock function with given fields: _a0, _a1
func (_m *UserConverter) FromGQLToDeleteUserPayload(_a0 *model.User, _a1 bool) *model.DeleteUserPayload {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for FromGQLToDeleteUserPayload")
	}

	var r0 *model.DeleteUserPayload
	if rf, ok := ret.Get(0).(func(*model.User, bool) *model.DeleteUserPayload); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.DeleteUserPayload)
		}
	}

	return r0
}

// UserConverter_FromGQLToDeleteUserPayload_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FromGQLToDeleteUserPayload'
type UserConverter_FromGQLToDeleteUserPayload_Call struct {
	*mock.Call
}

// FromGQLToDeleteUserPayload is a helper method to define mock.On call
//   - _a0 *model.User
//   - _a1 bool
func (_e *UserConverter_Expecter) FromGQLToDeleteUserPayload(_a0 interface{}, _a1 interface{}) *UserConverter_FromGQLToDeleteUserPayload_Call {
	return &UserConverter_FromGQLToDeleteUserPayload_Call{Call: _e.mock.On("FromGQLToDeleteUserPayload", _a0, _a1)}
}

func (_c *UserConverter_FromGQLToDeleteUserPayload_Call) Run(run func(_a0 *model.User, _a1 bool)) *UserConverter_FromGQLToDeleteUserPayload_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*model.User), args[1].(bool))
	})
	return _c
}

func (_c *UserConverter_FromGQLToDeleteUserPayload_Call) Return(_a0 *model.DeleteUserPayload) *UserConverter_FromGQLToDeleteUserPayload_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UserConverter_FromGQLToDeleteUserPayload_Call) RunAndReturn(run func(*model.User, bool) *model.DeleteUserPayload) *UserConverter_FromGQLToDeleteUserPayload_Call {
	_c.Call.Return(run)
	return _c
}

// ManyFromGQLToDeleteUserPayload provides a mock function with given fields: _a0, _a1
func (_m *UserConverter) ManyFromGQLToDeleteUserPayload(_a0 []*model.User, _a1 bool) []*model.DeleteUserPayload {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for ManyFromGQLToDeleteUserPayload")
	}

	var r0 []*model.DeleteUserPayload
	if rf, ok := ret.Get(0).(func([]*model.User, bool) []*model.DeleteUserPayload); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.DeleteUserPayload)
		}
	}

	return r0
}

// UserConverter_ManyFromGQLToDeleteUserPayload_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ManyFromGQLToDeleteUserPayload'
type UserConverter_ManyFromGQLToDeleteUserPayload_Call struct {
	*mock.Call
}

// ManyFromGQLToDeleteUserPayload is a helper method to define mock.On call
//   - _a0 []*model.User
//   - _a1 bool
func (_e *UserConverter_Expecter) ManyFromGQLToDeleteUserPayload(_a0 interface{}, _a1 interface{}) *UserConverter_ManyFromGQLToDeleteUserPayload_Call {
	return &UserConverter_ManyFromGQLToDeleteUserPayload_Call{Call: _e.mock.On("ManyFromGQLToDeleteUserPayload", _a0, _a1)}
}

func (_c *UserConverter_ManyFromGQLToDeleteUserPayload_Call) Run(run func(_a0 []*model.User, _a1 bool)) *UserConverter_ManyFromGQLToDeleteUserPayload_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]*model.User), args[1].(bool))
	})
	return _c
}

func (_c *UserConverter_ManyFromGQLToDeleteUserPayload_Call) Return(_a0 []*model.DeleteUserPayload) *UserConverter_ManyFromGQLToDeleteUserPayload_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UserConverter_ManyFromGQLToDeleteUserPayload_Call) RunAndReturn(run func([]*model.User, bool) []*model.DeleteUserPayload) *UserConverter_ManyFromGQLToDeleteUserPayload_Call {
	_c.Call.Return(run)
	return _c
}

// ManyToGQL provides a mock function with given fields: _a0
func (_m *UserConverter) ManyToGQL(_a0 []*models.User) []*model.User {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for ManyToGQL")
	}

	var r0 []*model.User
	if rf, ok := ret.Get(0).(func([]*models.User) []*model.User); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.User)
		}
	}

	return r0
}

// UserConverter_ManyToGQL_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ManyToGQL'
type UserConverter_ManyToGQL_Call struct {
	*mock.Call
}

// ManyToGQL is a helper method to define mock.On call
//   - _a0 []*models.User
func (_e *UserConverter_Expecter) ManyToGQL(_a0 interface{}) *UserConverter_ManyToGQL_Call {
	return &UserConverter_ManyToGQL_Call{Call: _e.mock.On("ManyToGQL", _a0)}
}

func (_c *UserConverter_ManyToGQL_Call) Run(run func(_a0 []*models.User)) *UserConverter_ManyToGQL_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]*models.User))
	})
	return _c
}

func (_c *UserConverter_ManyToGQL_Call) Return(_a0 []*model.User) *UserConverter_ManyToGQL_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UserConverter_ManyToGQL_Call) RunAndReturn(run func([]*models.User) []*model.User) *UserConverter_ManyToGQL_Call {
	_c.Call.Return(run)
	return _c
}

// ToGQL provides a mock function with given fields: _a0
func (_m *UserConverter) ToGQL(_a0 *models.User) *model.User {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for ToGQL")
	}

	var r0 *model.User
	if rf, ok := ret.Get(0).(func(*models.User) *model.User); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}

	return r0
}

// UserConverter_ToGQL_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ToGQL'
type UserConverter_ToGQL_Call struct {
	*mock.Call
}

// ToGQL is a helper method to define mock.On call
//   - _a0 *models.User
func (_e *UserConverter_Expecter) ToGQL(_a0 interface{}) *UserConverter_ToGQL_Call {
	return &UserConverter_ToGQL_Call{Call: _e.mock.On("ToGQL", _a0)}
}

func (_c *UserConverter_ToGQL_Call) Run(run func(_a0 *models.User)) *UserConverter_ToGQL_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*models.User))
	})
	return _c
}

func (_c *UserConverter_ToGQL_Call) Return(_a0 *model.User) *UserConverter_ToGQL_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UserConverter_ToGQL_Call) RunAndReturn(run func(*models.User) *model.User) *UserConverter_ToGQL_Call {
	_c.Call.Return(run)
	return _c
}

// NewUserConverter creates a new instance of UserConverter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserConverter(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserConverter {
	mock := &UserConverter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
