// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	"Todo-List/internProject/graphQL_service/graph/model"
	models "Todo-List/internProject/todo_app_service/pkg/models"

	mock "github.com/stretchr/testify/mock"
)

// ListConverter is an autogenerated mock type for the listConverter type
type ListConverter struct {
	mock.Mock
}

type ListConverter_Expecter struct {
	mock *mock.Mock
}

func (_m *ListConverter) EXPECT() *ListConverter_Expecter {
	return &ListConverter_Expecter{mock: &_m.Mock}
}

// ManyToGQL provides a mock function with given fields: _a0
func (_m *ListConverter) ManyToGQL(_a0 []*models.List) []*model.List {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for ManyToGQL")
	}

	var r0 []*model.List
	if rf, ok := ret.Get(0).(func([]*models.List) []*model.List); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.List)
		}
	}

	return r0
}

// ListConverter_ManyToGQL_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ManyToGQL'
type ListConverter_ManyToGQL_Call struct {
	*mock.Call
}

// ManyToGQL is a helper method to define mock.On call
//   - _a0 []*models.List
func (_e *ListConverter_Expecter) ManyToGQL(_a0 interface{}) *ListConverter_ManyToGQL_Call {
	return &ListConverter_ManyToGQL_Call{Call: _e.mock.On("ManyToGQL", _a0)}
}

func (_c *ListConverter_ManyToGQL_Call) Run(run func(_a0 []*models.List)) *ListConverter_ManyToGQL_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]*models.List))
	})
	return _c
}

func (_c *ListConverter_ManyToGQL_Call) Return(_a0 []*model.List) *ListConverter_ManyToGQL_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ListConverter_ManyToGQL_Call) RunAndReturn(run func([]*models.List) []*model.List) *ListConverter_ManyToGQL_Call {
	_c.Call.Return(run)
	return _c
}

// NewListConverter creates a new instance of ListConverter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewListConverter(t interface {
	mock.TestingT
	Cleanup(func())
}) *ListConverter {
	mock := &ListConverter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
