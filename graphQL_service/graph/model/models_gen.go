// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"bytes"
	"fmt"
	"io"
	"strconv"
	"time"
)

type Pageable interface {
	IsPageable()
	GetPageInfo() *PageInfo
	GetTotalCount() int32
}

type Access struct {
	JwtToken     string `json:"jwt_token"`
	RefreshToken string `json:"refresh_token"`
}

type CollaboratorInput struct {
	ListID string `json:"list_id"`
	UserID string `json:"user_id"`
}

type CreateCollaboratorPayload struct {
	List    *List `json:"list,omitempty"`
	User    *User `json:"user,omitempty"`
	Success bool  `json:"success"`
}

type CreateListInput struct {
	Name        string `json:"name"`
	Description string `json:"description"`
}

type CreateTodoInput struct {
	Name        string     `json:"name"`
	Description string     `json:"description"`
	ListID     string   `json:"list_id"`
	Priority   Priority `json:"priority"`
	AssignedTo *string  `json:"assigned_to,omitempty"`
	DueDate     *time.Time `json:"due_date,omitempty"`
}

type DeleteCollaboratorPayload struct {
	ListID  string `json:"list_id"`
	UserID  string `json:"user_id"`
	Success bool   `json:"success"`
}

type DeleteListPayload struct {
	Success     bool       `json:"success"`
	ID          string     `json:"id"`
	Name        *string    `json:"name,omitempty"`
	Description *string    `json:"description,omitempty"`
	CreatedAt   *time.Time `json:"created_at,omitempty"`
	LastUpdated *time.Time `json:"last_updated,omitempty"`
}

type DeleteTodoPayload struct {
	Success     bool        `json:"success"`
	ID          string      `json:"id"`
	Name        *string     `json:"name,omitempty"`
	Description *string     `json:"description,omitempty"`
	Status      *TodoStatus `json:"status,omitempty"`
	CreatedAt   *time.Time  `json:"created_at,omitempty"`
	LastUpdated *time.Time  `json:"last_updated,omitempty"`
	Priority    *Priority   `json:"priority,omitempty"`
	DueData     *time.Time  `json:"due_data,omitempty"`
}

type DeleteUserPayload struct {
	Success bool      `json:"success"`
	ID      string    `json:"id"`
	Email   *string   `json:"email,omitempty"`
	Role    *UserRole `json:"role,omitempty"`
}

type List struct {
	ID            string    `json:"id"`
	Name          string    `json:"name"`
	Description   string    `json:"description"`
	CreatedAt     time.Time `json:"created_at"`
	LastUpdated   time.Time `json:"last_updated"`
	Owner         *User     `json:"owner"`
	Todos         *TodoPage `json:"todos"`
	Collaborators *UserPage `json:"collaborators"`
}

type ListPage struct {
	Data       []*List   `json:"data"`
	PageInfo   *PageInfo `json:"page_info,omitempty"`
	TotalCount int32     `json:"total_count"`
}

func (ListPage) IsPageable()                 {}
func (this ListPage) GetPageInfo() *PageInfo { return this.PageInfo }
func (this ListPage) GetTotalCount() int32   { return this.TotalCount }

type Mutation struct {
}

type PageInfo struct {
	StartCursor string `json:"startCursor"`
	EndCursor   string `json:"endCursor"`
}

type Query struct {
}

type RefreshTokenInput struct {
	RefreshToken string `json:"refresh_token"`
}

type Todo struct {
	ID          string     `json:"id"`
	Name        string     `json:"name"`
	Description string     `json:"description"`
	List        *List      `json:"list"`
	Status      TodoStatus `json:"status"`
	CreatedAt   time.Time  `json:"created_at"`
	LastUpdated time.Time  `json:"last_updated"`
	Priority    Priority   `json:"priority"`
	AssignedTo  *User      `json:"assigned_to,omitempty"`
	DueData     *time.Time `json:"due_data,omitempty"`
}

type TodoPage struct {
	Data       []*Todo   `json:"data"`
	PageInfo   *PageInfo `json:"page_info,omitempty"`
	TotalCount int32     `json:"total_count"`
}

func (TodoPage) IsPageable()                 {}
func (this TodoPage) GetPageInfo() *PageInfo { return this.PageInfo }
func (this TodoPage) GetTotalCount() int32   { return this.TotalCount }

type TodosFilterInput struct {
	Status   *TodoStatus `json:"status,omitempty"`
	Priority *Priority   `json:"priority,omitempty"`
}

type UpdateListInput struct {
	Name        *string `json:"name,omitempty"`
	Description *string `json:"description,omitempty"`
}

type UpdateTodoInput struct {
	Name        *string     `json:"name,omitempty"`
	Description *string     `json:"description,omitempty"`
	Status      *TodoStatus `json:"status,omitempty"`
	Priority    *Priority   `json:"priority,omitempty"`
	AssignedTo  *string     `json:"assigned_to,omitempty"`
	DueDate     *time.Time  `json:"due_date,omitempty"`
}

type User struct {
	ID            string    `json:"id"`
	Email         string    `json:"email"`
	Role          *UserRole `json:"role,omitempty"`
	AssignedTo    *TodoPage `json:"assigned_to"`
	ParticipateIn *ListPage `json:"participate_in"`
}

type UserPage struct {
	Data       []*User   `json:"data"`
	PageInfo   *PageInfo `json:"page_info,omitempty"`
	TotalCount int32     `json:"total_count"`
}

func (UserPage) IsPageable()                 {}
func (this UserPage) GetPageInfo() *PageInfo { return this.PageInfo }
func (this UserPage) GetTotalCount() int32   { return this.TotalCount }

type Priority string

const (
	PriorityVeryLow  Priority = "VERY_LOW"
	PriorityLow      Priority = "LOW"
	PriorityMedium   Priority = "MEDIUM"
	PriorityHigh     Priority = "HIGH"
	PriorityVeryHigh Priority = "VERY_HIGH"
)

var AllPriority = []Priority{
	PriorityVeryLow,
	PriorityLow,
	PriorityMedium,
	PriorityHigh,
	PriorityVeryHigh,
}

func (e Priority) IsValid() bool {
	switch e {
	case PriorityVeryLow, PriorityLow, PriorityMedium, PriorityHigh, PriorityVeryHigh:
		return true
	}
	return false
}

func (e Priority) String() string {
	return string(e)
}

func (e *Priority) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Priority(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Priority", str)
	}
	return nil
}

func (e Priority) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *Priority) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e Priority) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}

type TodoStatus string

const (
	TodoStatusDone       TodoStatus = "DONE"
	TodoStatusInProgress TodoStatus = "IN_PROGRESS"
	TodoStatusOpen       TodoStatus = "OPEN"
)

var AllTodoStatus = []TodoStatus{
	TodoStatusDone,
	TodoStatusInProgress,
	TodoStatusOpen,
}

func (e TodoStatus) IsValid() bool {
	switch e {
	case TodoStatusDone, TodoStatusInProgress, TodoStatusOpen:
		return true
	}
	return false
}

func (e TodoStatus) String() string {
	return string(e)
}

func (e *TodoStatus) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = TodoStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid TodoStatus", str)
	}
	return nil
}

func (e TodoStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *TodoStatus) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e TodoStatus) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}

type UserRole string

const (
	UserRoleAdmin  UserRole = "ADMIN"
	UserRoleWriter UserRole = "WRITER"
	UserRoleReader UserRole = "READER"
)

var AllUserRole = []UserRole{
	UserRoleAdmin,
	UserRoleWriter,
	UserRoleReader,
}

func (e UserRole) IsValid() bool {
	switch e {
	case UserRoleAdmin, UserRoleWriter, UserRoleReader:
		return true
	}
	return false
}

func (e UserRole) String() string {
	return string(e)
}

func (e *UserRole) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = UserRole(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid UserRole", str)
	}
	return nil
}

func (e UserRole) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *UserRole) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e UserRole) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}
