scalar Time

directive @hasRole on FIELD_DEFINITION

enum UserRole{
  ADMIN
  WRITER
  READER
}

enum TodoStatus{
  DONE
  IN_PROGRESS
  OPEN
}

enum TodoType{
  EXPIRED
  ACTIVE
}

enum UserListRole{
  OWNER
  PARTICIPANT
}

enum Priority{
  VERY_LOW
  LOW
  MEDIUM
  HIGH
  VERY_HIGH
}

input UserRoleFilter{
  role: UserListRole
}

type User{
  id: ID!
  email: String!
  role: UserRole @hasRole
  assignedTo(first: Int, after: ID, last: Int, before: ID,filter: TodosFilterInput): TodoPage!
  participateIn(first: Int, after: ID, last: Int, before: ID): ListPage!
}

type Todo{
  id: ID!
  name: String!
  description: String!
  list: List!
  status: TodoStatus!
  createdAt: Time!
  lastUpdated: Time!
  priority: Priority!
  assignedTo: User
  dueData: Time
}

type List{
  id: ID!
  name: String!
  description: String!
  created_at: Time!
  last_updated: Time!
  owner: User!
  todos(first: Int, after: ID, last: Int, before: ID, filter: TodosFilterInput): TodoPage!
  collaborators(first: Int, after: ID, last: Int, before: ID): UserPage!
}

type RandomActivity{
  activity: String!
  type: String!
  participants: Int!
  kidFriendly: Boolean!
}

type Access{
  jwtToken: String!
  refreshToken: String!
}

input TodosFilterInput{
  status: TodoStatus
  priority: Priority
  type: TodoType
}

input CreateListInput{
  name: String!
  description: String!
}

input CreateTodoInput{
  name: String!
  description: String!
  listId: ID!
  priority: Priority!
  assignedTo: ID
  dueDate: Time
}

input UpdateTodoInput{
  name: String
  description: String
  status: TodoStatus
  priority: Priority
  assignedTo: ID
  dueDate: Time
}

input UpdateListInput{
  name: String
  description: String
}

type DeleteTodoPayload{
  success: Boolean!
  id: ID!
  name: String
  description: String
  status: TodoStatus
  createdAt: Time
  lastUpdated: Time
  priority: Priority
  dueDate: Time
}

type DeleteUserPayload{
  success: Boolean!
  id: ID!
  email: String
  role: UserRole
}

type DeleteListPayload{
  success: Boolean!
  id: ID!
  name: String
  description: String
  created_at: Time
  last_updated: Time
}

type PageInfo{
  startCursor: ID!
  endCursor: ID!
  hasNextPage: Boolean!
  hasPrevPage: Boolean!
}

interface Pageable{
  pageInfo: PageInfo
  totalCount: Int!
}

type TodoPage implements Pageable{
  data: [Todo!]!
  pageInfo: PageInfo
  totalCount: Int!
}

type ListPage implements Pageable{
  data: [List!]!
  pageInfo: PageInfo
  totalCount: Int!
}

type UserPage implements Pageable{
  data: [User!]!
  pageInfo: PageInfo
  totalCount: Int!
}

input CollaboratorInput{
  listId: ID!
  userEmail: String!
}

type CreateCollaboratorPayload{
  list: List
  user: User
  success: Boolean!
}

type DeleteCollaboratorPayload{
  listId: ID!
  userEmail: String!
  success: Boolean!
}

input RefreshTokenInput{
  refreshToken: String!
}

type Query{
  lists(first: Int, after: ID, last: Int, before: ID): ListPage!
  list(id: ID!): List

  todos(first: Int, after: ID, last: Int, before: ID, criteria: TodosFilterInput): TodoPage!
  todo(id: ID!): Todo

  users(first: Int, after: ID, last: Int, before: ID): UserPage!
  user(id: ID!): User

  randomActivity: RandomActivity!
}

type Mutation{
  createList(input: CreateListInput!): List!
  updateList(id: ID!, input: UpdateListInput!): List!
  addListCollaborator(input: CollaboratorInput!): CreateCollaboratorPayload!
  deleteListCollaborator(id: ID!, user_id: ID!): DeleteCollaboratorPayload!
  deleteList(id: ID!): DeleteListPayload!
  deleteLists: [DeleteListPayload!]!

  createTodo(input: CreateTodoInput!): Todo!
  deleteTodo(id: ID!): DeleteTodoPayload!
  deleteTodos: [DeleteTodoPayload!]!
  updateTodo(id: ID!, input: UpdateTodoInput!): Todo!
  deleteTodosByListId(id: ID!): [DeleteTodoPayload!]!

  deleteUser(id: ID!): DeleteUserPayload!
  deleteUsers: [DeleteUserPayload!]!

  exchangeRefreshToken(input: RefreshTokenInput!): Access!
}